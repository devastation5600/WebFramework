{"version":3,"sources":["./src/app/admin/admin-panel/admin-panel.component.ts","./src/app/admin/admin-panel/admin-panel.component.html","./src/app/admin/admin-panel/admin-panel.component.css","./src/app/errors/not-found/not-found.component.ts","./src/app/errors/not-found/not-found.component.html","./src/app/errors/not-found/not-found.component.css","./src/app/errors/server-error/server-error.component.ts","./src/app/errors/server-error/server-error.component.html","./src/app/errors/server-error/server-error.component.css","./src/environments/environment.prod.ts","./src/app/errors/test-errors/test-errors.component.ts","./src/app/errors/test-errors/test-errors.component.html","./src/app/errors/test-errors/test-errors.component.css","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/home/home.component.css","./src/app/lists/lists.component.html","./src/app/_models/userParams.ts","./src/app/_services/presence.service.ts","./src/app/_services/account.service.ts","./src/app/_models/pagination.ts","./src/app/_services/paginationHelper.ts","./src/app/_services/members.service.ts","./src/app/lists/lists.component.ts","./src/app/lists/lists.component.css","./src/app/members/member-details/member-details.component.html","./src/app/_services/message.service.ts","./src/app/members/member-details/member-details.component.ts","./src/app/members/member-details/member-details.component.css","./src/app/members/member-edit/member-edit.component.ts","./src/app/members/member-edit/member-edit.component.html","./src/app/members/member-edit/member-edit.component.css","./src/app/members/member-list/member-list.component.ts","./src/app/members/member-list/member-list.component.html","./src/app/members/member-list/member-list.component.css","./src/app/messages/messages.component.html","./src/app/modals/confirm-dialog/confirm-dialog.component.ts","./src/app/modals/confirm-dialog/confirm-dialog.component.html","./src/app/modals/confirm-dialog/confirm-dialog.component.css","./src/app/_services/confirm.service.ts","./src/app/messages/messages.component.ts","./src/app/messages/messages.component.css","./src/app/_guards/admin.guard.ts","./src/app/_guards/auth.guard.ts","./src/app/_guards/prevent-unsaved-changes.guard.ts","./src/app/_resolvers/member-detailed.resolver.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.component.css","./src/app/nav/nav.component.ts","./src/app/nav/nav.component.html","./src/app/nav/nav.component.css","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/register/register.component.css","./src/app/members/member-card/member-card.component.ts","./src/app/members/member-card/member-card.component.html","./src/app/members/member-card/member-card.component.css","./src/app/_modules/shared.module.ts","./src/app/_interceptors/error.interceptor.ts","./src/app/_interceptors/jwt.interceptor.ts","./src/app/_services/busy.service.ts","./src/app/_interceptors/loading.interceptor.ts","./src/app/members/photo-editor/photo-editor.component.ts","./src/app/members/photo-editor/photo-editor.component.html","./src/app/members/photo-editor/photo-editor.component.css","./src/app/_forms/text-input/text-input.component.ts","./src/app/_forms/text-input/text-input.component.html","./src/app/_forms/text-input/text-input.component.css","./src/app/_forms/date-input/date-input.component.ts","./src/app/_forms/date-input/date-input.component.html","./src/app/_forms/date-input/date-input.component.css","./src/app/members/member-messages/member-messages.component.ts","./src/app/members/member-messages/member-messages.component.html","./src/app/members/member-messages/member-messages.component.css","./src/app/_directives/has-role.directive.ts","./src/app/modals/roles-modal/roles-modal.component.ts","./src/app/modals/roles-modal/roles-modal.component.html","./src/app/modals/roles-modal/roles-modal.component.css","./src/app/_services/admin.service.ts","./src/app/admin/user-management/user-management.component.ts","./src/app/admin/user-management/user-management.component.html","./src/app/admin/user-management/user-management.component.css","./src/app/admin/photo-management/photo-management.component.ts","./src/app/admin/photo-management/photo-management.component.html","./src/app/admin/photo-management/photo-management.component.css","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["AdminPanelComponent","selector","template","NotFoundComponent","ServerErrorComponent","router","navigation","this","getCurrentNavigation","error","extras","state","environment","http","baseUrl","validationErrors","get","subscribe","response","console","log","post","HomeComponent","registerMode","event","Userparams","user","minAge","maxAge","pageNumber","pageSize","orderBy","gender","toastr","hubUrl","onlineUserSource","BehaviorSubject","onlineUsers$","asObservable","hubConnection","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","catch","on","username","pipe","take","usernames","next","filter","x","knownAs","info","onTap","navigateByUrl","stop","providedIn","presence","currentUserSource","ReplaySubject","currentUser$","model","map","setCurrentUser","createHubConnection","roles","getDecodedToken","role","Array","isArray","push","localStorage","setItem","JSON","stringify","removeItem","stopHubConnection","parse","atob","split","PaginatedResult","getPaginatedResult","url","params","paginatedResult","observe","result","body","headers","pagination","getPaginationHeaders","append","toString","accountService","memberCache","Map","userParams","photoId","put","delete","predicate","member","values","reduce","arr","elem","concat","find","of","index","members","indexOf","Object","join","set","ListsComponent","memberService","loadLikes","getLikes","page","messageThreadSource","messageThread$","otherUsername","messages","message","group","connections","some","forEach","dateRead","Date","now","container","content","invoke","recipientUsername","id","route","messageService","routeReuseStrategy","shouldReuseRoute","data","queryParams","tab","selectTab","galleryOptions","width","height","imagePercent","thumbnailsColumns","imageAnimation","Slide","preview","galleryImages","getImages","imageUrls","photo","photos","small","medium","big","getMessageThread","tabId","memberTabs","tabs","active","activeTab","heading","length","static","$event","editForm","dirty","returnValue","loadMember","getMember","updateMember","success","reset","MemberListComponent","genderList","value","display","getUserParams","loadMembers","setUserParams","getMembers","resetUserParams","ConfirmDialogComponent","bsModalRef","hide","modalService","title","btnOkText","btnCancelText","config","initialState","show","Observable","getResult","observer","subscription","onHidden","complet","unsubscribe","MessagesComponent","confirmService","loading","loadMessages","getMessages","confirm","deleteMessage","splice","findIndex","m","includes","PreventUnsavedChangesGuard","component","MemberDetailedResolver","paramMap","routes","path","runGuardsAndResolvers","canActivate","children","resolve","canDeactivate","pathMatch","AppRoutingModule","imports","forRoot","exports","AppComponent","getItem","NavComponent","login","logout","fb","cancelRegister","validateErrors","initializeForm","maxDate","setFullYear","getFullYear","registerForm","required","dateOfBirth","city","country","password","minLength","maxLength","confirmPassword","matchValues","matchTo","control","parent","controls","isMathching","register","emit","MemberCardComponent","addLike","SharedModule","declarations","positionClass","request","handle","catchError","status","errors","modalStateErrors","key","flat","statusText","navigationExtras","throwError","currentUser","clone","setHeaders","Authorization","BusyService","spinnerService","busyRequstCount","busyService","busy","finalize","idle","hasBaseDropzoneOver","initializeUploader","e","setMainPhoto","photoUrl","p","isMain","deletePhoto","uploader","authToken","isHTML5","allowedFileType","removeAfterUpload","autoUpload","maxFileSize","onAfterAddingFile","file","withCredentials","onSuccessItem","item","TextInputComponent","ngControl","type","valueAccessor","obj","fn","DateInputComponent","bsConfig","containerClass","dateInputFormat","isDisabled","MemberMessagesComponent","sendMessage","messageContent","then","messageForm","changeDetection","OnPush","viewContainerRef","templateRef","r","appHasRole","createEmbeddedView","clear","updateSelectedRoles","adminService","getUserWithRole","getUserWithRoles","users","class","getRolesArray","rolesToUpdate","el","checked","name","updateUserRoles","userRoles","isMatch","userRole","PhotoManagementComponent","getPhotosForApproval","approvePhoto","rejectPhoto","AppModule","schemas","providers","provide","useClass","multi","bootstrap","bootstrapModule","err","webpackEmptyAsyncContext","req","Promise","Error","code","keys","module"],"mappings":"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","file":"main.d97efd145558fc01dfbe.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-panel',\n  templateUrl: './admin-panel.component.html',\n  styleUrls: ['./admin-panel.component.css']\n})\nexport class AdminPanelComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","export default \"<h2>Admin panel</h2>\\n\\n<div class=\\\"tab-panel\\\">\\n  <tabset class=\\\"memeber-tabset\\\">\\n      <tab heading='User management' *appHasRole='[\\\"Admin\\\"]'>\\n        <div class=\\\"container\\\">\\n          <app-user-management></app-user-management>\\n        </div>\\n      </tab>\\n      <tab heading='Photo management' *appHasRole='[\\\"Admin\\\", \\\"Moderator\\\"]'>\\n        <div class=\\\"container\\\">\\n          <app-photo-management></app-photo-management>\\n        </div>\\n      </tab>\\n  </tabset>\\n</div>\\n\";","export default \"\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","export default \"<div class=\\\"container\\\">\\n  <h1>Not Found</h1>\\n  <button class=\\\"btn btn-info btn-lg\\\" routerLink='/'>Return to home page</button>\\n</div>\\n\";","export default \"\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-server-error',\n  templateUrl: './server-error.component.html',\n  styleUrls: ['./server-error.component.css']\n})\nexport class ServerErrorComponent implements OnInit {\n  error: any;\n\n  constructor(private router: Router) {\n    const navigation = this.router.getCurrentNavigation();\n    this.error = navigation?.extras?.state?.error;\n  }\n\n\n  ngOnInit(): void {\n  }\n\n}\n","export default \"<h4>Internal Server error - refreshing the page will make the error disappear!</h4>\\n\\n<ng-container>\\n  <h5 class=\\\"text-danger\\\">Error: {{error.message}}</h5>\\n  <p class=\\\"font-weight-bold\\\">Note if you are seeing this then Angular is probably to blame </p>\\n  <p>What to do next</p>\\n  <ol>\\n    <li>Open the chrome dev tools</li>\\n    <li>Inspect the network tab</li>\\n    <li>Check the failing request</li>\\n    <li>Examin the request URL- make sure it is correct</li>\\n    <li>Reproduce the error in Postman - if wee see the same response, then the issue is not with Angular</li>\\n  </ol>\\n  <p>Following is the stack trace - this is where your investigation should start!</p>\\n  <code class=\\\"mt-5\\\" style=\\\"background-color: whitesmoke;\\\">{{error.details}}</code>\\n</ng-container>\\n\";","export default \"\";","export const environment = {\n  production: true,\n  apiUrl: 'api/',\n  hubUrl: 'hub/'\n};\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { environment } from 'src/environments/environment.prod';\r\n\r\n@Component({\r\n  selector: 'app-test-errors',\r\n  templateUrl: './test-errors.component.html',\r\n  styleUrls: ['./test-errors.component.css']\r\n})\r\nexport class TestErrorsComponent implements OnInit {\r\n  baseUrl = environment.apiUrl;\r\n  validationErrors: string[] = [];\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  get404Error(){\r\n    this.http.get(this.baseUrl + 'buggy/not-found').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  get500Error(){\r\n    this.http.get(this.baseUrl + 'buggy/server-error').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  get401Error(){\r\n    this.http.get(this.baseUrl + 'buggy/auth').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  get400ValidationError(){\r\n    this.http.post(this.baseUrl + 'account/register', {}).subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n      this.validationErrors = error;\r\n    })\r\n  }\r\n\r\n\r\n  get400Error(){\r\n    this.http.get(this.baseUrl + 'buggy/bad-request').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n}\r\n","export default \"<ng-container >\\n  <button (click)='get500Error()' class=\\\"btn btn-outline-primary mr-3\\\">Test 500 Error</button>\\n  <button (click)='get400ValidationError() ' class=\\\"btn btn-outline-primary mr-3\\\">Test 400 Validation Error</button>\\n  <button (click)='get404Error()' class=\\\"btn btn-outline-primary mr-3\\\">Test 404 Error</button>\\n  <button (click)='get401Error()' class=\\\"btn btn-outline-primary mr-3\\\">Test 401 Error</button>\\n  <button (click)='get400Error()' class=\\\"btn btn-outline-primary mr-3\\\">Test 400 Error</button>\\n\\n   <div class=\\\"row mt-5\\\" *ngIf='validationErrors.length'>\\n     <ul class=\\\"tex-danger\\\">\\n       <li *ngFor='let error of validationErrors'>\\n         {{error}}\\n       </li>\\n     </ul>\\n   </div>\\n</ng-container>\\n\";","export default \"\";","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  registerMode = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  registerToggle(){\n    this.registerMode = !this.registerMode;\n  }\n\n  cancelRegisterMode(event: boolean) {\n    this.registerMode = event;\n  }\n}\n","export default \"<div class=\\\"container mt-4\\\">\\n  <div *ngIf='!registerMode' style=\\\"text-align: center;\\\">\\n    <h1>Find your match</h1>\\n    <p class=\\\"lead\\\"> Come on in to view your matches..... all you need to do is sign up</p>\\n    <div class=\\\"text-center\\\">\\n          <button (click)=\\\"registerToggle()\\\" class=\\\"btn btn-primary btn-lg mr-2\\\">Register</button>\\n          <button class=\\\"btn btn-info btn-lg \\\">Learn more</button>\\n    </div>\\n  </div>\\n\\n  <div *ngIf=\\\"registerMode\\\" class=\\\"container\\\">\\n    <div class=\\\"row justify-content-center\\\">\\n      <div class='col-4'>\\n          <app-register (cancelRegister)=\\\"cancelRegisterMode($event)\\\"></app-register>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"\";","export default \"<div class=\\\"text-center mt-3\\\">\\n    <h2>{{predicate === 'liked' ? 'Members I like' : 'Members who like me'}}</h2>\\n</div>\\n\\n<div class=\\\"container mt-3\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"btn-group\\\" name=\\\"predicate\\\">\\n      <button class=\\\"btn btn-primary\\\" btnRadio=\\\"liked\\\"\\n        [(ngModel)]=\\\"predicate\\\" (click)=\\\"loadLikes()\\\"> Members I like</button>\\n      <button class=\\\"btn btn-primary\\\" btnRadio=\\\"likedBy\\\"\\n        [(ngModel)]=\\\"predicate\\\" (click)=\\\"loadLikes()\\\"> Members who like me</button>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row mt-3\\\">\\n    <div class=\\\"col-2\\\" *ngFor=\\\"let member of members\\\">\\n        <app-member-card [member]=\\\"member\\\"></app-member-card>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"d-flex justify-content-center\\\" *ngIf=\\\"pagination\\\">\\n  <pagination\\n  [boundaryLinks]=\\\"true\\\"\\n  [totalItems]=\\\"pagination.TotalItems\\\"\\n  [itemsPerPage]=\\\"pagination.ItemsPerPage\\\"\\n  [(ngModel)]=\\\"pagination.CurrentPage\\\"\\n  (pageChanged)=\\\"pageChanged($event)\\\"\\n  previousText=\\\"&lsaquo;\\\"\\n  nextText=\\\"&rsaquo;\\\"\\n  firstText=\\\"&laquo;\\\"\\n  lastText=\\\"&raquo;\\\">\\n</pagination>\\n</div>\\n\";","import { User } from \"./users\";\r\n\r\nexport class Userparams {\r\n  gender : string;\r\n  minAge = 18;\r\n  maxAge = 99;\r\n  pageNumber = 1;\r\n  pageSize = 10;\r\n  orderBy = 'lastActive'\r\n\r\n\r\n  constructor(user: User) {\r\n    this.gender = user.gender === 'female' ? 'male' : 'female';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\r\nimport { ConsoleLogger } from '@microsoft/signalr/dist/esm/Utils';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../_models/users';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PresenceService {\r\n  hubUrl = environment.hubUrl;\r\n  private hubConnection: HubConnection;\r\n  private onlineUserSource = new BehaviorSubject<string[]>([]);\r\n  onlineUsers$ = this.onlineUserSource.asObservable();\r\n\r\n  constructor(private toastr: ToastrService, private router: Router) { }\r\n\r\n  createHubConnection(user: User) {\r\n    this.hubConnection = new HubConnectionBuilder()\r\n      .withUrl(this.hubUrl + 'presence', {\r\n          accessTokenFactory: () => user.token\r\n      })\r\n      .withAutomaticReconnect()\r\n      .build()\r\n\r\n    this.hubConnection\r\n      .start()\r\n      .catch( error => console.log(error));\r\n\r\n    this.hubConnection.on('UserIsOnline', username => {\r\n      this.onlineUsers$.pipe(take(1)).subscribe(usernames =>  {\r\n          this.onlineUserSource.next([...usernames, username])\r\n      })\r\n    })\r\n\r\n    this.hubConnection.on('UserIsOffline', username => {\r\n      this,this.onlineUsers$.pipe(take(1)).subscribe(usernames => {\r\n        this.onlineUserSource.next([...usernames.filter(x => x !== username)])\r\n      })\r\n    })\r\n\r\n    this.hubConnection.on('GetOnlineUsers', (usernames: string[]) => {\r\n      this.onlineUserSource.next(usernames);\r\n    })\r\n\r\n    this.hubConnection.on('NewMessageReceived', ({username, knownAs}) => {\r\n      this.toastr.info(knownAs + ' has sent you a new message!')\r\n        .onTap\r\n        .pipe(take(1))\r\n        .subscribe(() => this.router.navigateByUrl('/members/' + username + '?tab=3'));\r\n    })\r\n\r\n    }\r\n\r\n    stopHubConnection() {\r\n      this.hubConnection.stop().catch( error => console.log(error));\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { stringify } from '@angular/compiler/src/util';\nimport { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { User } from '../_models/users';\n\nimport {map} from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { PresenceService } from './presence.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n    baseUrl = environment.apiUrl;\n    private currentUserSource = new ReplaySubject<User>(1);\n    currentUser$ = this.currentUserSource.asObservable();\n\n  constructor(private http: HttpClient, private presence: PresenceService) { }\n\n  login(model: any){\n    return this.http.post<User>(this.baseUrl + 'account/login', model).pipe(\n      map((response: User) => {\n        const user = response;\n        if (user) {\n          this.setCurrentUser(user);\n          this.presence.createHubConnection(user);\n        }\n      })\n    )\n  }\n\n register(model: any){\n   return this.http.post<User>(this.baseUrl + 'account/register', model).pipe(\n     map((user: User) => {\n       if(user) {\n        this.setCurrentUser(user);\n        this.presence.createHubConnection(user);\n       }\n     })\n   )\n }\n\n  setCurrentUser(user: User) {\n    user.roles = [];\n    const roles = this.getDecodedToken(user.token).role;\n    Array.isArray(roles) ? user.roles = roles : user.roles.push(roles);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.currentUserSource.next(user);\n  }\n\n  logout(){\n    localStorage.removeItem('user');\n    this.currentUserSource.next(null);\n    this.presence.stopHubConnection();\n\n  }\n\n  getDecodedToken(token) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n}\n","export interface Pagination {\r\n  currentPage: number;\r\n  itemsPerPage: number;\r\n  totalItems: number;\r\n  totoalPages:number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n","import { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { PaginatedResult } from \"../_models/pagination\";\r\n\r\nexport function getPaginatedResult<T>(url, params, http: HttpClient) {\r\n    const  paginatedResult: PaginatedResult<T> = new PaginatedResult<T>();\r\n    return http.get<T>(url, { observe: 'response', params }).pipe(\r\n      map(response => {\r\n        paginatedResult.result = response.body;\r\n        if (response.headers.get('Pagination') !== null) {\r\n          paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));\r\n        }\r\n        return paginatedResult;\r\n      })\r\n    );\r\n}\r\n\r\nexport function getPaginationHeaders(pageNumber: number, pageSize: number) {\r\n    let params = new HttpParams();\r\n\r\n      params = params.append('pageNumber', pageNumber.toString());\r\n      params = params.append('pageSize', pageSize.toString());\r\n\r\n      return params;\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Member } from '../_models/members';\r\nimport { PaginatedResult } from '../_models/pagination';\r\nimport { Userparams } from '../_models/userParams';\r\nimport { User } from '../_models/users';\r\nimport { AccountService } from './account.service';\r\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MembersService {\r\n  baseUrl = environment.apiUrl\r\n  members: Member[];\r\n  memberCache = new Map();\r\n  user: User;\r\n  userParams: Userparams;\r\n\r\n  constructor(private http: HttpClient, private accountService: AccountService) {\r\n    this.accountService.currentUser$.pipe(take(1)).subscribe( user => {\r\n      this.user = user;\r\n      this.userParams = new Userparams(user);\r\n    })\r\n   }\r\n\r\n   getUserParams () {\r\n     return this.userParams;\r\n   }\r\n\r\n   setUserParams(params: Userparams) {\r\n     this.userParams = params;\r\n   }\r\n\r\n   resetUserParams() {\r\n      this.userParams = new Userparams(this.user);\r\n      return this.userParams;\r\n   }\r\n\r\n   setMainPhoto(photoId : number){\r\n    return this.http.put(this.baseUrl + 'users/set-main-photo/' + photoId, {});\r\n  }\r\n\r\n  deletePhoto(photoId: number) {\r\n    return this.http.delete(this.baseUrl + 'users/delete-photo/'+ photoId);\r\n  }\r\n\r\n  addLike(username : string) {\r\n    return this.http.post(this.baseUrl + 'likes/' + username, {})\r\n  }\r\n\r\n  getLikes(predicate: string, pageNumber, pageSize){\r\n    let params = getPaginationHeaders(pageNumber, pageSize);\r\n    params = params.append('predicate' , predicate);\r\n    return getPaginatedResult<Partial<Member[]>>(this.baseUrl + 'likes', params, this.http);\r\n  }\r\n\r\n  getMember(username: string){\r\n    const member = [...this.memberCache.values()]\r\n    .reduce((arr,elem) => arr.concat(elem.result), [])\r\n    .find((member: Member) => member.username === username);\r\n\r\n    if (member) {\r\n      return of(member);\r\n    }\r\n    return this.http.get<Member>(this.baseUrl + 'users/' + username);\r\n  }\r\n\r\n  updateMember(member: Member ) {\r\n    return this.http.put<Member>(this.baseUrl + 'users/', member).pipe(\r\n      map(() => {\r\n        const index = this.members.indexOf(member);\r\n        this.members[index] = member\r\n      })\r\n    )\r\n  }\r\n\r\n  getMembers(userParams : Userparams){\r\n    var response = this.memberCache.get(Object.values(userParams).join('-'));\r\n    if (response) {\r\n      return of(response);\r\n    }\r\n    let params = getPaginationHeaders(userParams.pageNumber, userParams.pageSize);\r\n\r\n    params = params.append('minAge', userParams.minAge.toString());\r\n    params = params.append('maxAge', userParams.maxAge.toString());\r\n    params = params.append('gender', userParams.gender);\r\n    params = params.append('orderBy', userParams.orderBy);\r\n\r\n  return getPaginatedResult<Member[]>(this.baseUrl + 'users', params, this.http).\r\n    pipe(map(response => {\r\n        this.memberCache.set(Object.values(userParams).join('-'),response);\r\n        return response;\r\n    }));\r\n}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Member } from '../_models/members';\nimport { Pagination } from '../_models/pagination';\nimport { MembersService } from '../_services/members.service';\n\n@Component({\n  selector: 'app-lists',\n  templateUrl: './lists.component.html',\n  styleUrls: ['./lists.component.css']\n})\nexport class ListsComponent implements OnInit {\n  members: Partial<Member[]>;\n  predicate = 'liked';\n  pageNumber = 1;\n  pageSize = 10;\n  pagination: Pagination;\n\n  constructor(private memberService: MembersService) { }\n\n  ngOnInit(): void {\n    this.loadLikes();\n  }\n\n  loadLikes(){\n    this.memberService.getLikes(this.predicate, this.pageNumber, this.pageSize).subscribe(response => {\n        this.members = response.result;\n        this.pagination = response.pagination;\n    })\n  }\n\n  pageChanged(event: any) {\n    this.pageNumber = event.page;\n  }\n\n}\n","export default \"\";","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-4\\\" >\\n      <div class=\\\"card\\\">\\n        <img src=\\\"{{member.photoUrl || './assest/user.png'}}\\\" alt=\\\"{{member.knownAs}}\\\" class=\\\"card-img-top img-thumbnail\\\">\\n        <div class=\\\"card-body\\\">\\n          <div class=\\\"mb-2\\\" *ngIf=\\\"(presence.onlineUsers$ | async).includes(member.username)\\\">\\n            <i class=\\\"fa fa-user-circle text-success\\\"></i>Online now\\n          </div>\\n            <div>\\n                <strong>Location:</strong>\\n                <p>{{member.city}}, {{member.country}}</p>\\n            </div>\\n            <div>\\n              <strong>Age:</strong>\\n              <p>{{member.age}}</p>\\n          </div>\\n          <div>\\n            <strong>Last Active:</strong>\\n            <p>{{member.lastActive | timeago}}</p>\\n          </div>\\n          <div>\\n            <strong>Member since:</strong>\\n            <p>{{member.created | date: 'dd MMM yyyy'}}</p>\\n          </div>\\n        </div>\\n        <div class=\\\"card-footer\\\">\\n            <div class=\\\"btn-group d-flex\\\">\\n              <button class=\\\"btn btn-primary\\\">Like</button>\\n              <button class=\\\"btn btn-success\\\" (click)=\\\"selectTab(3)\\\" >Message</button>\\n            </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-8\\\">\\n      <tabset class=\\\"member-tabset\\\" #memberTabs>\\n          <tab heading='About {{member.knownAs}}' (selectTab)=\\\"onTabActivated($event)\\\">\\n            <h4>Description</h4>\\n            <p>{{member.introduction}}</p>\\n            <h4>Looking for</h4>\\n            <p>{{member.lookingFor}}</p>\\n          </tab>\\n          <tab heading='Intrest' (selectTab)=\\\"onTabActivated($event)\\\">\\n            <h4>Interest</h4>\\n            <p>{{member.intrests}}</p>\\n          </tab>\\n          <tab heading='Photos' (selectTab)=\\\"onTabActivated($event)\\\">\\n            <ngx-gallery [options]=\\\"galleryOptions\\\" [images]=\\\"galleryImages\\\"\\n            style=\\\"display: inline-block; margin-bottom: 20px;\\\"></ngx-gallery>\\n          </tab>\\n          <tab heading='Messages' (selectTab)=\\\"onTabActivated($event)\\\">\\n            <app-member-messages [username]=\\\"member.username\\\" ></app-member-messages>\\n          </tab>\\n      </tabset>\\n    </div>\\n</div>\\n\";","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Group } from '../_models/group';\nimport { Message } from '../_models/message';\nimport { User } from '../_models/users';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  baseUrl = environment.apiUrl;\n  hubUrl = environment.hubUrl;\n  private hubConnection: HubConnection;\n  private messageThreadSource = new BehaviorSubject<Message[]>([]);\n  messageThread$ = this.messageThreadSource.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  createHubConnection(user: User, otherUsername: string) {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n        accessTokenFactory: () => user.token\n      })\n      .withAutomaticReconnect()\n      .build()\n\n      this.hubConnection.start().catch(error => console.log(error));\n\n      this.hubConnection.on('ReceiveMessageThread', messages => {\n        this.messageThreadSource.next(messages);\n      })\n\n      this.hubConnection.on('NewMessage', message => {\n        this.messageThread$.pipe(take(1)).subscribe(messages => {\n          this.messageThreadSource.next([...messages, message])\n        })\n      })\n\n      this.hubConnection.on('UpdatedGroup', (group: Group) => {\n        if (group.connections.some(x => x.username === otherUsername)) {\n          this.messageThread$.pipe(take(1)).subscribe(messages => {\n            messages.forEach(message => {\n              if (!message.dateRead) {\n                message.dateRead = new Date(Date.now())\n              }\n            })\n            this.messageThreadSource.next([...messages]);\n          })\n        }\n      })\n  }\n\n  stopHubConnection(){\n    if(this.hubConnection) {\n      this.hubConnection.stop();\n    }\n  }\n\n  getMessages(pageNumber, pageSize, container) {\n    let params  = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('Container', container);\n    return  getPaginatedResult<Message[]>(this.baseUrl + 'messages', params, this.http)\n  }\n\n  getMessageThread(username: string){\n    return this.http.get<Message[]>(this.baseUrl + 'messages/thread/'+ username);\n  }\n\n  async sendMessage(username: string, content: string) {\n    return this.hubConnection.invoke('SendMessage', {recipientUsername: username, content})\n      .catch(error => console.log(error));\n  }\n\n  deleteMessage(id: number) {\n     return this.http.delete(this.baseUrl + 'messages/' + id);\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgxGalleryAnimation, NgxGalleryImage, NgxGalleryOptions } from '@kolkov/ngx-gallery';\nimport { TabDirective, TabsetComponent } from 'ngx-bootstrap/tabs';\nimport { PresenceService } from 'src/app/_services/presence.service';\nimport { Member } from 'src/app/_models/members';\nimport { Message } from 'src/app/_models/message';\nimport { MembersService } from 'src/app/_services/members.service';\nimport { MessageService } from 'src/app/_services/message.service';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { User } from 'src/app/_models/users';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-member-details',\n  templateUrl: './member-details.component.html',\n  styleUrls: ['./member-details.component.css']\n})\nexport class MemberDetailsComponent implements OnInit, OnDestroy {\n  @ViewChild('memberTabs', {static: true}) memberTabs: TabsetComponent;\n  member: Member;\n  galleryOptions: NgxGalleryOptions[];\n  galleryImages: NgxGalleryImage[];\n  activeTab: TabDirective;\n  messages: Message[] = [];\n  user: User;\n\n  constructor(public presence: PresenceService, private route: ActivatedRoute,\n     private messageService: MessageService, private accountService: AccountService,\n     private router: Router) {\n       this.accountService.currentUser$.pipe(take(1)).subscribe(user => this.user = user);\n       this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n     }\n\n  ngOnInit(): void {\n    this.route.data.subscribe(data => {\n      this.member = data.member;\n    })\n\n    this.route.queryParams.subscribe(params => {\n      params.tab ? this.selectTab(params.tab) : this.selectTab(0);\n    })\n\n    this.galleryOptions = [\n      {\n        width: '500px',\n        height: '500px',\n        imagePercent: 100,\n        thumbnailsColumns: 4,\n        imageAnimation: NgxGalleryAnimation.Slide,\n        preview: false\n      }\n    ]\n\n    this.galleryImages = this.getImages();\n  }\n\n  getImages(): NgxGalleryImage[] {\n    const imageUrls = [];\n    for (const photo of this.member.photos) {\n      imageUrls.push({\n        small: photo?.url,\n        medium: photo?.url,\n        big: photo?.url\n      })\n    }\n\n    return imageUrls\n  }\n\n  loadMessages() {\n    this.messageService.getMessageThread(this.member.username).subscribe(messages => {\n      this.messages = messages;\n    })\n  }\n\n  selectTab(tabId: number){\n    this.memberTabs.tabs[tabId].active = true;\n  }\n\n  onTabActivated(data: TabDirective){\n    this.activeTab = data;\n    if(this.activeTab.heading === 'Messages' && this.messages.length === 0) {\n      this.messageService.createHubConnection(this.user, this.member.username);\n    } else {\n      this.messageService.stopHubConnection();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.messageService.stopHubConnection();\n  }\n\n\n}\n","export default \".img-thumbnail {\\r\\n  margin:25px;\\r\\n  width: 85%;\\r\\n  height: 85%;\\r\\n}\\r\\n\\r\\n.card-body {\\r\\n  padding: 0 25px;\\r\\n}\\r\\n\\r\\n.card-footer {\\r\\n  padding: 10px 15px;\\r\\n  background-color: #ffff;\\r\\n  border-top:  none ;\\r\\n}\\r\\n\";","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { take } from 'rxjs/operators';\nimport { Member } from 'src/app/_models/members';\nimport { User } from 'src/app/_models/users';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { MembersService } from 'src/app/_services/members.service';\n\n@Component({\n  selector: 'app-member-edit',\n  templateUrl: './member-edit.component.html',\n  styleUrls: ['./member-edit.component.css'],\n})\nexport class MemberEditComponent implements OnInit {\n  @ViewChild('editForm') editForm: NgForm;\n  member: Member;\n  user: User;\n\n  //if browser change catches before swapped\n  @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\n    if (this.editForm.dirty) {\n      $event.returnValue = true;\n    }\n  }\n\n  constructor( private accountService: AccountService, private memberService: MembersService, private toastr: ToastrService) {\n    this.accountService.currentUser$\n      .pipe(take(1))\n      .subscribe((user) => (this.user = user));\n  }\n\n  ngOnInit(): void {\n    this.loadMember();\n  }\n\n  loadMember() {\n    this.memberService.getMember(this.user.username).subscribe((member) => {\n      this.member = member;\n    });\n  }\n\n  updateMember() {\n    this.memberService.updateMember(this.member).subscribe(() => {\n      this.toastr.success('Profile updated successfully');\n      this.editForm.reset(this.member);\n    });\n  }\n}\n","export default \"<div class=\\\"row\\\" *ngIf=\\\"member\\\">\\n  <div class=\\\"col-4\\\">\\n    <h1>Your Profile</h1>\\n  </div>\\n  <div class=\\\"col-8\\\">\\n    <div class=\\\"alert alert-info\\\" *ngIf=\\\"editForm.dirty\\\">\\n    <strong>Information:</strong> You have made changes. Any unsaved changes will be lost\\n    </div>\\n  </div>\\n  <div class=\\\"col-4\\\" >\\n    <div class=\\\"card\\\">\\n      <img src=\\\"{{member.photoUrl || './assest/user.png'}}\\\" alt=\\\"{{member.knownAs}}\\\" class=\\\"card-img-top img-thumbnail\\\">\\n      <div class=\\\"card-body\\\">\\n          <div>\\n              <strong>Location:</strong>\\n              <p>{{member.city}}, {{member.country}}</p>\\n          </div>\\n          <div>\\n            <strong>Age:</strong>\\n            <p>{{member.age}}</p>\\n        </div>\\n        <div>\\n          <strong>Last Active:</strong>\\n          <p>{{member.lastActive}}</p>\\n        </div>\\n        <div>\\n          <strong>Member since:</strong>\\n          <p>{{member.created}}</p>\\n        </div>\\n      </div>\\n      <div class=\\\"card-footer\\\">\\n        <button [disabled]=\\\"!editForm.dirty\\\" form='editForm' type=\\\"submit\\\" class=\\\"btn btn-success btn-block\\\">Save Changes</button>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"col-8\\\">\\n    <tabset class=\\\"member-tabset\\\">\\n        <tab heading='About {{member.knownAs}}'>\\n            <form #editForm=\\\"ngForm\\\" id='editForm' (ngSubmit)='updateMember()'>\\n              <h4>Description</h4>\\n              <textarea  class=\\\"form-control\\\" [(ngModel)]=\\\"member.introduction\\\" name=\\\"introduction\\\" rows=\\\"6\\\"></textarea>\\n              <h4>Looking for</h4>\\n              <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"member.lookingFor\\\" name=\\\"lookingFor\\\" rows=\\\"6\\\"></textarea>\\n              <h4 class=\\\"mt-2\\\">Interest</h4>\\n              <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"member.intrests\\\" name=\\\"intrests\\\" rows=\\\"6\\\"></textarea>\\n              <h4 class=\\\"mt-2\\\">Location Details: </h4>\\n              <div class=\\\"form-inline\\\">\\n                  <label for=\\\"city\\\">City: </label>\\n                  <input [(ngModel)]=\\\"member.city\\\"  type=\\\"text\\\" name=\\\"city\\\" class=\\\"form-control mx-2\\\">\\n                  <label for=\\\"country\\\">Country: </label>\\n                  <input [(ngModel)]=\\\"member.country\\\" type=\\\"text\\\" name=\\\"country\\\" class=\\\"form-control mx-2\\\">\\n              </div>\\n            </form>\\n        </tab>\\n        <tab heading='Edit Photos'>\\n          <app-photo-editor [member]=\\\"member\\\"></app-photo-editor>\\n        </tab>\\n    </tabset>\\n  </div>\\n</div>\\n\";","export default \".img-thumbnail {\\r\\n  margin:25px;\\r\\n  width: 85%;\\r\\n  height: 85%;\\r\\n}\\r\\n\\r\\n.card-body {\\r\\n  padding: 0 25px;\\r\\n}\\r\\n\\r\\n.card-footer {\\r\\n  padding: 10px 15px;\\r\\n  background-color: #ffff;\\r\\n  border-top:  none ;\\r\\n}\\r\\n\";","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { Member } from 'src/app/_models/members';\nimport { Pagination } from 'src/app/_models/pagination';\nimport { Userparams } from 'src/app/_models/userParams';\nimport { User } from 'src/app/_models/users';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { MembersService } from 'src/app/_services/members.service';\n\n@Component({\n  selector: 'app-member-list',\n  templateUrl: './member-list.component.html',\n  styleUrls: ['./member-list.component.css']\n})\nexport class MemberListComponent implements OnInit {\n  members: Member[];\n  pagination: Pagination;\n  userParams : Userparams;\n  user: User;\n  genderList = [{value: 'male', display: 'Males'},{value: 'female', display: 'Females'}]\n\n  constructor(private memberService: MembersService) {\n      this.userParams = this.memberService.getUserParams();\n   }\n\n  ngOnInit(): void {\n    this.loadMembers();\n  }\n\n  loadMembers(){\n    this.memberService.setUserParams(this.userParams);\n    this.memberService.getMembers(this.userParams).subscribe(response => {\n      this.members = response.result;\n      this.pagination = response.pagination\n    })\n  }\n\n  resetFilters() {\n    this.userParams = this.memberService.resetUserParams();\n    this.loadMembers();\n  }\n\n  pageChanged(event: any) {\n    this.userParams.pageNumber = event.page;\n    this.memberService.setUserParams(this.userParams);\n    this.loadMembers();\n    }\n}\n","export default \"<div class=\\\"text-center mt-3\\\">\\n  <h2>Your matches - {{pagination?.totalItems}} found</h2>\\n</div>\\n\\n<div class=\\\"container mt-3\\\">\\n  <form #form=\\\"ngForm\\\" class=\\\"form-inline mb-3\\\" (ngSubmit)=\\\"loadMembers()\\\" autocomplete=\\\"off\\\">\\n    <div class=\\\"form-group\\\">\\n      <label > Age from: </label>\\n      <input type=\\\"number\\\" name=\\\"minAge\\\" class=\\\"form-control ml-1\\\" style=\\\" width: 70px;\\\" [(ngModel)]=\\\"userParams.minAge\\\">\\n    </div>\\n\\n    <div class=\\\"form-group px-2\\\">\\n      <label > Age to: </label>\\n      <input type=\\\"number\\\" name=\\\"maxAge\\\" class=\\\"form-control ml-1\\\" style=\\\" width: 70px;\\\" [(ngModel)]=\\\"userParams.maxAge\\\">\\n    </div>\\n\\n    <div class=\\\"form-group px-2\\\">\\n      <label> Show: </label>\\n      <select name=\\\"gender\\\" style=\\\"width: 130px\\\"[(ngModel)]=\\\"userParams.gender\\\"  class=\\\"form-control ml-1\\\">\\n          <option *ngFor=\\\"let gender of genderList\\\" [value]=\\\"gender.value\\\">\\n            {{gender.display}}\\n          </option>\\n      </select>\\n    </div>\\n\\n    <button class=\\\"btn btn-primary ml-1 px-2\\\" type=\\\"submit\\\">Apply Filter</button>\\n    <button (click)=\\\"resetFilters()\\\" class=\\\"btn btn-info ml-1\\\" type=\\\"submit\\\">Reset Filter</button>\\n\\n    <div class=\\\"col\\\">\\n      <div class=\\\"btn-group float-right\\\">\\n        <button\\n        type=\\\"button\\\"\\n        class=\\\"btn btn-primary\\\"\\n        name=\\\"orderBy\\\"\\n        (click)=\\\"loadMembers()\\\"\\n        btnRadio= 'lastActive'\\n        [(ngModel)]=\\\"userParams.orderBy\\\"\\n        >Last Active </button>\\n\\n        <button\\n        type=\\\"button\\\"\\n        class=\\\"btn btn-primary\\\"\\n        name=\\\"orderBy\\\"\\n        (click)=\\\"loadMembers()\\\"\\n        btnRadio= 'created'\\n        [(ngModel)]=\\\"userParams.orderBy\\\"\\n        >Newest Members</button>\\n\\n      </div>\\n    </div>\\n\\n  </form>\\n</div>\\n\\n<div class=\\\"row\\\">\\n  <div *ngFor=\\\"let member of members\\\" class=\\\"col-2\\\">\\n    <app-member-card [member]=\\\"member\\\"></app-member-card>\\n  </div>\\n</div>\\n\\n<div class=\\\"d-flex justify-content-center\\\" *ngIf=\\\"pagination\\\">\\n  <pagination\\n  [boundaryLinks]=\\\"true\\\"\\n  [totalItems]=\\\"pagination.TotalItems\\\"\\n  [itemsPerPage]=\\\"pagination.ItemsPerPage\\\"\\n  [(ngModel)]=\\\"pagination.CurrentPage\\\"\\n  (pageChanged)=\\\"pageChanged($event)\\\"\\n  previousText=\\\"&lsaquo;\\\"\\n  nextText=\\\"&rsaquo;\\\"\\n  firstText=\\\"&laquo;\\\"\\n  lastText=\\\"&raquo;\\\">\\n</pagination>\\n</div>\\n\";","export default \"\";","export default \"<div class=\\\"row mb-4\\\">\\n  <div class=\\\"btn-group\\\" name='container'>\\n    <button class=\\\"btn btn-primary\\\" btnRadio='Unread' [(ngModel)]=\\\"container\\\"\\n     (click)=\\\"loadMessages()\\\">\\n      <i class=\\\"fa fa-envelope\\\"></i> Unread\\n    </button>\\n    <button class=\\\"btn btn-primary\\\" btnRadio='Inbox' [(ngModel)]=\\\"container\\\"\\n    (click)=\\\"loadMessages()\\\">\\n     <i class=\\\"fa fa-envelope-open\\\"></i> Inbox\\n   </button>\\n   <button class=\\\"btn btn-primary\\\" btnRadio='Outbox' [(ngModel)]=\\\"container\\\"\\n   (click)=\\\"loadMessages()\\\">\\n    <i class=\\\"fa fa-paper-plane\\\"></i> Outbox\\n  </button>\\n  </div>\\n</div>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"messages?.length === 0\\\" >\\n    <h3>No Messages</h3>\\n</div>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"messages?.length > 0\\\">\\n    <table class=\\\"table table-hover\\\" style=\\\"cursor: pointer\\\">\\n      <tr>\\n        <th style=\\\"width: 40%; color: white\\\">Message</th>\\n        <th style=\\\"width: 20%; color: white\\\">From / To</th>\\n        <th style=\\\"width: 20%; color: white\\\">Sent / Receive</th>\\n        <th style=\\\"width: 20%; color: white\\\"></th>\\n      </tr>\\n      <tr [hidden]=\\\"loading\\\" *ngFor=\\\"let message of messages\\\"\\n          routerLink='{{container === \\\"Outbox\\\"\\n             ? \\\"/members/\\\" + message.recipientUsername\\n             : \\\"/members/\\\" + message.senderUsername}}' [queryParams]='{tab:3}'>\\n             <td>{{message.content}}</td>\\n             <td>\\n              <div *ngIf=\\\"container === 'Outbox'\\\">\\n                    <img\\n                    class=\\\"img-circle rounded-circle mr-2\\\"\\n                     src=\\\"{{message.recipientPhotoUrl || './assets/user.png'}}\\\"\\n                     alt=\\\"{{message.recipientUsername}}\\\">\\n                     <strong>{{message.recipientUsername | titlecase}}</strong>\\n              </div>\\n              <div *ngIf=\\\"container !== 'Outbox'\\\">\\n                <img\\n                class=\\\"img-circle rounded-circle mr-2\\\"\\n                 src=\\\"{{message.senderPhotoUrl || './assets/user.png'}}\\\"\\n                 alt=\\\"{{message.senderUsername}}\\\">\\n                 <strong>{{message.senderUsername | titlecase}}</strong>\\n              </div>\\n             </td>\\n             <td>{{message.messageSent | timeago}}</td>\\n             <td>\\n                  <button (click)=\\\"$event.stopPropagation()\\\" (click)=\\\"deleteMessage(message.id)\\\" class=\\\"btn btn-danger\\\">Delete</button>\\n             </td>\\n      </tr>\\n    </table>\\n</div>\\n\\n<div class=\\\"d-flex justify-content-center\\\" *ngIf=\\\"pagination && !loading\\\">\\n  <pagination\\n    [boundaryLinks]=\\\"true\\\"\\n    [totalItems]=\\\"pagination.totalItems\\\"\\n    [itemsPerPage]=\\\"pagination.itemsPerPage\\\"\\n    [(ngModel)]=\\\"pagination.currentPage\\\"\\n    (pageChanged)=\\\"pageChanged($event)\\\"\\n    previousText=\\\"&lsaquo;\\\"\\n    nextText=\\\"&rsaquo;\\\"\\n    firstText=\\\"&laquo;\\\"\\n    lastText=\\\"&raquo;\\\">\\n  </pagination>\\n</div>\\n\";","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.css']\n})\nexport class ConfirmDialogComponent implements OnInit {\n  title: string;\n  message: string;\n  btnOkText: string;\n  btnCancelText: string;\n  result: boolean;\n\n  constructor(public bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n  }\n\n  confirm() {\n    this.result = true;\n    this.bsModalRef.hide();\n  }\n\n  decline() {\n    this.result = false;\n    this.bsModalRef.hide();\n  }\n\n}\n","export default \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title pull-left\\\">{{title}}</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <p>{{message}}</p>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"confirm()\\\">{{btnOkText}}</button>\\n  <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"decline()\\\">{{btnCancelText}}</button>\\n</div>\\n\";","export default \"\";","import { Injectable } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\nimport { ConfirmDialogComponent } from '../modals/confirm-dialog/confirm-dialog.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmService {\n  bsModalRef: BsModalRef;\n\n  constructor(private modalService: BsModalService) { }\n\n  confirm( title = 'Confirmation',\n    message = 'Are you sure you want to do this?',\n    btnOkText = 'Ok',\n    btnCancelText = 'Cancel'): Observable<boolean>{\n      const config = {\n        initialState: {\n          title,\n          message,\n          btnOkText,\n          btnCancelText\n        }\n      }\n      this.bsModalRef = this.modalService.show(ConfirmDialogComponent, config);\n\n      return new Observable<boolean>(this.getResult());\n  }\n\n  private getResult(){\n    return(observer) => {\n      const subscription = this.bsModalRef.onHidden.subscribe(() => {\n        observer.next(this.bsModalRef.content.result);\n        observer.complet()\n      });\n\n      return {\n          unsubscribe() {\n            subscription.unsubscribe();\n          }\n      }\n    }\n  }\n}\n","// import { Message } from '@angular/compiler/src/i18n/i18n_ast';\n\nimport { Component, OnInit } from '@angular/core';\nimport { Message } from '../_models/message';\nimport { Pagination } from '../_models/pagination';\nimport { ConfirmService } from '../_services/confirm.service';\nimport { MessageService } from '../_services/message.service';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n  messages: Message[] = [];\n  pagination: Pagination;\n  container = 'Unread'\n  pageNumber = 1;\n  pageSize = 5;\n  loading = false;\n\n  constructor(private messageService: MessageService, private confirmService: ConfirmService) { }\n\n  ngOnInit(): void {\n    this.loadMessages()\n  }\n\n  loadMessages(){\n    this.loading = true;\n    this.messageService.getMessages(this.pageNumber, this.pageSize, this.container).subscribe(response =>{\n      this.messages = response.result;\n      this.pagination = response.pagination;\n      this.loading = false;\n    })\n  }\n\n  deleteMessage(id: number) {\n    this.confirmService.confirm('Confirm delete message', 'This cannot be undone').subscribe(result => {\n      if(result) {\n        this.messageService.deleteMessage(id).subscribe(() => {\n          this.messages.splice(this.messages.findIndex(m => m.id === id), 1);\n        })\n      }\n    })\n  }\n\n  pageChanged(event: any) {\n    this.pageNumber = event.page;\n    this.loadMessages();\n  }\n\n}\n","export default \".img-circle{\\r\\n  max-height: 50px;\\r\\n}\\r\\n\\r\\n\\r\\n.btn-danger {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n\\r\\n.btn:hover{\\r\\n  color: white;\\r\\n}\\r\\n\";","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AccountService } from '../_services/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private accountService: AccountService, private toastr: ToastrService) {}\n\n\n  canActivate(): Observable<boolean> {\n    return this.accountService.currentUser$.pipe(\n      map(user => {\n        if (user.roles.includes('Admin') || user.roles.includes('Moderator')) {\n            return true;\n        }\n        this.toastr.error('You cannot enter this area');\n      })\n    )\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AccountService } from '../_services/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private accountService: AccountService, private toastr: ToastrService){}\n\n  canActivate(): Observable<boolean> {\n    return this.accountService.currentUser$.pipe(\n      map(user =>{\n        if (!user) {this.toastr.error('You shant pass')}\n        return !!user;\n      })\n    )\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { MemberEditComponent } from '../members/member-edit/member-edit.component';\r\nimport { ConfirmService } from '../_services/confirm.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PreventUnsavedChangesGuard implements CanDeactivate<unknown> {\r\n\r\n  constructor(private confirmService: ConfirmService) {}\r\n\r\n  canDeactivate(component: MemberEditComponent): Observable<boolean> | boolean {\r\n    if (component.editForm.dirty) {\r\n      return this.confirmService.confirm()\r\n    }\r\n    return true;\r\n  }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot,Resolve, RouterStateSnapshot } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Member } from \"../_models/members\";\r\nimport { MembersService } from \"../_services/members.service\";\r\n\r\n@Injectable({\r\n    providedIn : 'root'\r\n})\r\nexport class MemberDetailedResolver implements Resolve<Member> {\r\n\r\n    constructor(private memberService: MembersService) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<Member> {\r\n      return this.memberService.getMember(route.paramMap.get('username'));\r\n}\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminPanelComponent } from './admin/admin-panel/admin-panel.component';\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\nimport { ServerErrorComponent } from './errors/server-error/server-error.component';\nimport { TestErrorsComponent } from './errors/test-errors/test-errors.component';\nimport { HomeComponent } from './home/home.component';\nimport { ListsComponent } from './lists/lists.component';\nimport { MemberDetailsComponent } from './members/member-details/member-details.component';\nimport { MemberEditComponent } from './members/member-edit/member-edit.component';\nimport { MemberListComponent } from './members/member-list/member-list.component';\nimport { MessagesComponent } from './messages/messages.component';\nimport { AdminGuard } from './_guards/admin.guard';\nimport { AuthGuard } from './_guards/auth.guard';\nimport { PreventUnsavedChangesGuard } from './_guards/prevent-unsaved-changes.guard';\nimport { MemberDetailedResolver } from './_resolvers/member-detailed.resolver';\n\nconst routes: Routes = [\n  {path:'', component: HomeComponent},\n  {\n    path:'',\n    runGuardsAndResolvers: 'always',\n    canActivate: [AuthGuard],\n    children: [\n      {path:'members', component: MemberListComponent},\n      {path:'members/:username', component: MemberDetailsComponent, resolve: {member: MemberDetailedResolver}},\n      {path:'member/edit', component: MemberEditComponent, canDeactivate: [PreventUnsavedChangesGuard]},\n      {path:'lists', component: ListsComponent},\n      {path:'messages', component: MessagesComponent},\n      {path:'admin', component: AdminPanelComponent, canActivate: [AdminGuard]}\n    ]\n  },\n  {path:'errors', component: TestErrorsComponent},\n  {path:'not-found', component: NotFoundComponent},\n  {path:'server-error', component: ServerErrorComponent},\n  {path:'**', component: NotFoundComponent, pathMatch: 'full'}\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\nimport {HttpClient} from '@angular/common/http';\nimport { AccountService } from './_services/account.service';\nimport { User } from './_models/users';\nimport { PresenceService } from './_services/presence.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'The Dating App';\n  users: any;\n\n  constructor(private accountService: AccountService, private presence: PresenceService) {}\n\n  ngOnInit() {\n    this.setCurrentUser();\n  }\n\n  setCurrentUser(){\n    const user: User = JSON.parse(localStorage.getItem('user'));\n    if(user){\n      this.accountService.setCurrentUser(user);\n      this.presence.createHubConnection(user);\n    }\n  }\n\n}\n","export default \"<ngx-ui-loader\\nfgsType=\\\"rectangle-bounce-pulse-out\\\"\\ntext='Loading...'\\nfgsColor='black'\\n>\\n</ngx-ui-loader>\\n\\n<app-nav></app-nav>\\n\\n<div ngxUiLoaderBlurred [blur]=\\\"10\\\" class=\\\"container\\\" style=\\\"margin-top: 100px\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\\n\";","export default \"\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable } from 'rxjs';\nimport { User } from '../_models/users';\nimport { AccountService } from '../_services/account.service';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\n  model: any = {};\n\n\n  constructor(public accountService: AccountService, private router: Router,\n    private toastr: ToastrService) {\n  }\n\n  ngOnInit (): void {\n     console.log(this.accountService.currentUser$);\n  }\n\n  login(){\n    this.accountService.login(this.model).subscribe(response => {\n      this.router.navigateByUrl('/members');\n      console.log(response);\n    })\n  }\n\n\n  logout(){\n    this.accountService.logout();\n    this.router.navigateByUrl('/')\n  }\n\n}\n","export default \"<nav class=\\\"navbar navbar-expand-md navbar-dark fixed-top bg-primary\\\">\\n\\t<div class=\\\"container\\\">\\n\\t\\t<a class=\\\"navbar-brand\\\" routerLink='/'>Dog App</a>\\n\\n\\t\\t\\t<ul class=\\\"navbar-nav mr-auto\\\"  >\\n\\t\\t\\t\\t<ng-container *ngIf=\\\"(accountService.currentUser$ | async)\\\">\\n\\t\\t\\t\\t\\t<li class=\\\"nav-item\\\">\\n\\t\\t\\t\\t\\t\\t<a class=\\\"nav-link\\\" routerLink='/members' routerLinkActive='active'>Members</a>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t<li class=\\\"nav-item\\\">\\n\\t\\t\\t\\t\\t\\t<a class=\\\"nav-link\\\" routerLink='/lists' routerLinkActive='active'>Lists</a>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t<li class=\\\"nav-item\\\">\\n\\t\\t\\t\\t\\t\\t<a class=\\\"nav-link\\\" routerLink='/messages' routerLinkActive='active'>Messages</a>\\n\\t\\t\\t\\t\\t</li>\\n          <li *appHasRole='[\\\"Admin\\\", \\\"Moderator\\\"]' class=\\\"nav-item\\\">\\n\\t\\t\\t\\t\\t\\t<a class=\\\"nav-link\\\" routerLink='/admin' routerLinkActive='active'>Admin</a>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t<li class=\\\"nav-item\\\">\\n\\t\\t\\t\\t\\t<a class=\\\"nav-link\\\" routerLink='/errors' routerLinkActive='active'>Errors</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\n\\t\\t\\t<div class=\\\"dropdown\\\" *ngIf=\\\"(accountService.currentUser$ | async) as user\\\" dropdown>\\n\\t\\t\\t\\t<img src=\\\"{{user.photoUrl || './assets/user.png'}}\\\" alt=\\\"{{user.username}}\\\">\\n\\t\\t\\t\\t<a class=\\\"dropdown-toggle text-light\\\" dropdownToggle>Welcome {{user.knownAs|| user.username | titlecase}}</a>\\n\\t\\t\\t\\t<div class=\\\"dropdown-menu mt-3\\\" *dropdownMenu>\\n\\t\\t\\t\\t\\t<a routerLink='/member/edit' class=\\\"dropdown-item\\\">Edit Profile</a>\\n\\t\\t\\t\\t\\t<div class=\\\"dropdown-divider\\\"></div>\\n\\t\\t\\t\\t\\t<a class=\\\"dropdown-item\\\" (click)=\\\"logout()\\\">Logout</a>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<form  *ngIf=\\\"(accountService.currentUser$ | async) == null\\\" #loginForm=\\\"ngForm\\\" class=\\\"form-inline mt-2 mt-md-0\\\" (ngSubmit)=\\\"login()\\\"\\n\\t\\t\\t\\tautocomplete=\\\"off\\\">\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\tname=\\\"username\\\"\\n\\t\\t\\t\\t\\t[(ngModel)]=\\\"model.username\\\"\\n\\t\\t\\t\\t\\tclass=\\\"form-control mr-sm-2\\\"\\n\\t\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\t\\tplaceholder=\\\"Username\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t name=\\\"password\\\"\\n\\t\\t\\t\\t [(ngModel)]=\\\"model.password\\\"\\n\\t\\t\\t\\t class=\\\"form-control mr-sm-2\\\"\\n\\t\\t\\t\\t type=\\\"password\\\"\\n\\t\\t\\t\\t placeholder=\\\"Password\\\">\\n\\t\\t\\t\\t<button class=\\\"btn btn-success my-2 my-sm-0\\\" type=\\\"submit\\\">Login</button>\\n\\t\\t\\t</form>\\n\\t\\t</div>\\n</nav>\\n\";","export default \".dropdown-toggle, .dropdown-item\\r\\n{\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\nimg {\\r\\n  max-height: 50px;\\r\\n  border: 2px solid #fff;\\r\\n  display: inline;\\r\\n}\\r\\n\";","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from '../_services/account.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  @Output() cancelRegister = new EventEmitter\n  registerForm: FormGroup;\n  maxDate: Date;\n  validateErrors: string[] = [];\n\n  constructor(private accountService: AccountService, private toastr: ToastrService,\n     private fb: FormBuilder, private router: Router) { }\n\n  ngOnInit(): void{\n    this.initializeForm();\n    this.maxDate = new Date();\n    this.maxDate.setFullYear(this.maxDate.getFullYear() -18);\n  }\n\n  initializeForm(){\n    this.registerForm = this.fb.group({\n      gender: ['male'],\n      username: ['', Validators.required],\n      knownAs: ['', Validators.required],\n      dateOfBirth: ['', Validators.required],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      password: ['', [Validators.required,\n        Validators.minLength(4), Validators.maxLength(8)]],\n      confirmPassword: ['', [Validators.required, this.matchValues('password')]]\n    })\n  }\n\n  matchValues(matchTo: string): ValidatorFn {\n    return (control: AbstractControl) => {\n      return control?.value === control?.parent?.controls[matchTo].value\n      ? null : {isMathching: true}\n    }\n  }\n\n  register(){\n    this.accountService.register(this.registerForm.value).subscribe(response =>{\n        this.router.navigateByUrl('/members');\n    }, error =>{\n      this.validateErrors = error;\n    })\n  }\n\n  cancel(){\n    this.cancelRegister.emit(false);\n  }\n\n}\n","export default \"<form class=\\\"text-center\\\" [formGroup]='registerForm' (ngSubmit)=\\\"registerForm.valid && register()\\\" autocomplete=\\\"off\\\">\\n  <h2 class=\\\"text-center text-primary\\\">Sign Up</h2>\\n  <hr>\\n\\n  <div class=\\\"form-group\\\">\\n    <label class=\\\"control-label\\\" style='margin-right: 10px;'> I am a: </label>\\n    <label class=\\\"radio-inline\\\">\\n      <input type=\\\"radio\\\" value=\\\"male\\\" formControlName='gender'> Male\\n    </label>\\n    <label class=\\\"radio-inline\\\">\\n      <input type=\\\"radio\\\" value=\\\"female\\\" formControlName='gender' class='ml-3'> Female\\n    </label>\\n  </div>\\n\\n  <app-text-input [formControl]='registerForm.controls[\\\"username\\\"]' [label]='\\\"Username\\\"'></app-text-input>\\n  <app-text-input [formControl]='registerForm.controls[\\\"knownAs\\\"]' [label]='\\\"Known As\\\"'></app-text-input>\\n  <app-date-input [formControl]='registerForm.controls[\\\"dateOfBirth\\\"]' [label]='\\\"Date Of Birth\\\"' [maxDate]='maxDate' ></app-date-input>\\n  <app-text-input [formControl]='registerForm.controls[\\\"city\\\"]' [label]='\\\"City\\\"'></app-text-input>\\n  <app-text-input [formControl]='registerForm.controls[\\\"country\\\"]' [label]='\\\"Country\\\"'></app-text-input>\\n  <app-text-input [formControl]='registerForm.controls[\\\"password\\\"]' [label]='\\\"Password\\\"' [type]='\\\"password\\\"'></app-text-input>\\n  <app-text-input [formControl]='registerForm.controls[\\\"confirmPassword\\\"]' [label]='\\\"Confirm Password\\\"' [type]='\\\"password\\\"' ></app-text-input>\\n\\n  <div class=\\\"row\\\" *ngIf=\\\"validateErrors.length\\\">\\n    <ul class=\\\"tex-danger\\\">\\n      <li *ngFor='let error of validationErrors'>\\n        {{error}}\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <button [disabled]='!registerForm.valid' class=\\\"btn btn-success mr-4\\\" type=\\\"submit\\\">Register</button>\\n    <button class=\\\"btn btn-danger  mr-4\\\" (click)=\\\"cancel()\\\" type=\\\"submit\\\">Cancel</button>\\n  </div>\\n</form>\\n\";","export default \"\";","import { Component, Input, OnInit } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { PresenceService } from 'src/app/_services/presence.service';\nimport { Member } from 'src/app/_models/members';\nimport { MembersService } from 'src/app/_services/members.service';\n\n@Component({\n  selector: 'app-member-card',\n  templateUrl: './member-card.component.html',\n  styleUrls: ['./member-card.component.css']\n})\nexport class MemberCardComponent implements OnInit {\n  @Input() member: Member;\n\n  constructor(private memberService: MembersService, private toastr: ToastrService,\n    public presence: PresenceService) { }\n\n  ngOnInit(): void {\n  }\n\n  addLike(member: Member) {\n      this.memberService.addLike(member.username).subscribe(() => {\n        this.toastr.success('You have liked ' + member.knownAs);\n      })\n  }\n\n}\n","export default \"<div class=\\\"card mb-4\\\">\\n  <div class=\\\"card-img-wrapper\\\">\\n    <img src=\\\"{{member.photoUrl || './assets/user.png'}}\\\" alt=\\\"{{member.knownAs}}\\\" class=\\\"card-img-top\\\">\\n    <ul class=\\\"list-inline member-icons animate text-center\\\">\\n      <li class=\\\"list-inline-item\\\">\\n        <button routerLink='/members/{{member.username}}' class=\\\"btn btn-primary\\\">\\n          <i class=\\\"fa fa-user\\\"></i>\\n        </button>\\n      </li>\\n      <li class=\\\"list-inline-item\\\">\\n        <button (click)=\\\"addLike(member)\\\" class=\\\"btn btn-primary\\\">\\n          <i class=\\\"fa fa-heart\\\"></i>\\n        </button>\\n      </li>\\n      <li class=\\\"list-inline-item\\\">\\n        <button\\n        routerLink='/members/{{member.username}}'\\n        [queryParams]='{tab:3}'\\n        class=\\\"btn btn-primary\\\">\\n          <i class=\\\"fa fa-envelope\\\"></i>\\n        </button>\\n      </li>\\n    </ul>\\n  </div>\\n  <div class=\\\"card-body p-1\\\">\\n    <h6 class=\\\"card-title text-center mb-1\\\">\\n      <span [class.is-online]=\\\"(presence.onlineUsers$ | async).includes(member.username)\\\">\\n        <i class=\\\"fa fa-user mr-2\\\"></i>\\n      </span>\\n      {{member.knownAs}}, {{member.age}}\\n    </h6>\\n    <p class=\\\"card-text text-muted text-center\\\">{{member.city}}</p>\\n  </div>\\n</div>\\n\";","export default \".card:hover img {\\r\\n  transform: scale(1.2,1.2);\\r\\n  transition-duration: 500ms;\\r\\n  transition-timing-function: ease-out;\\r\\n  opacity: 0.7;\\r\\n}\\r\\n\\r\\n\\r\\n.card img {\\r\\n  transform: scale(1.0,1.0);\\r\\n  transition-duration: 500ms;\\r\\n  transition-timing-function: ease-out;\\r\\n}\\r\\n\\r\\n\\r\\n.card-img-wrapper{\\r\\n  overflow: hidden;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n\\r\\n.member-icons {\\r\\n  position: absolute;\\r\\n  bottom: -30%;\\r\\n  left: 0;\\r\\n  right: 0;\\r\\n  margin-right: auto;\\r\\n  margin-left: auto;\\r\\n  opacity: 0;\\r\\n}\\r\\n\\r\\n\\r\\n.card-img-wrapper:hover .member-icons {\\r\\n  bottom: 0;\\r\\n  opacity: 1;\\r\\n}\\r\\n\\r\\n\\r\\n.animate {\\r\\n  transition: all 0.3s ease-in-out;\\r\\n}\\r\\n\\r\\n\\r\\n@keyframes fa-blink {\\r\\n  0% {opacity: 1;}\\r\\n  100% {opacity: 0.4;}\\r\\n}\\r\\n\\r\\n\\r\\n.is-online{\\r\\n  animation: fa-blink 1.5s linear infinite;\\r\\n  color: rgb(1, 189, 42);\\r\\n}\\r\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToastrModule } from 'ngx-toastr';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport {TabsModule} from 'ngx-bootstrap/tabs';\nimport { NgxGalleryModule } from '@kolkov/ngx-gallery';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport {BsDatepickerModule} from 'ngx-bootstrap/datepicker';\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TimeagoModule } from 'ngx-timeago';\nimport { ModalModule } from 'ngx-bootstrap/modal';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ToastrModule.forRoot({\n      positionClass: 'toast-bottom-right'\n    }),\n    BsDropdownModule.forRoot(),\n    TabsModule.forRoot(),\n    NgxGalleryModule,\n    FileUploadModule,\n    BsDatepickerModule.forRoot(),\n    PaginationModule.forRoot(),\n    ButtonsModule.forRoot(),\n    TimeagoModule.forRoot(),\n    ModalModule.forRoot()\n  ],\n  exports: [\n      BsDropdownModule,\n      ToastrModule,\n      TabsModule,\n      NgxGalleryModule,\n      FileUploadModule,\n      BsDatepickerModule,\n      PaginationModule,\n      ButtonsModule,\n      TimeagoModule,\n      ModalModule\n  ]\n})\nexport class SharedModule { }\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { NavigationExtras, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private router: Router, private toastr: ToastrService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError(error => {\n        if (error) {\n          switch (error.status) {\n            case 400:\n              if(error.error.errors) {\n                const modalStateErrors = [];\n                for (const key in error.error.errors) {\n                  if (error.error.errors[key]) {\n                    modalStateErrors.push(error.error.errors[key])\n                  }\n                }\n                throw modalStateErrors.flat();\n              } else if (typeof(error.error) === 'object'){\n                  this.toastr.error(error.statusText, error.status);\n              } else {\n                this.toastr.error(error.error, error.status);\n              }\n              break;\n            case 401:\n              this.toastr.error(error.statusText === 'OK' ? 'Unauthorized' : error.statusText, error.status);\n              break;\n            case 404:\n              this.router.navigateByUrl('/not-found');\n              break;\n            case 500:\n              const navigationExtras: NavigationExtras = {state: {error: error.error}}\n              this.router.navigateByUrl('/server-error', navigationExtras);\n              break;\n            default:\n              this.toastr.error('something unexpected went wrong');\n              console.log(error);\n              break;\n          }\n        }\n        return throwError(error);\n      })\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../_services/account.service';\nimport { User } from '../_models/users';\nimport { take } from 'rxjs/operators';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private accountService: AccountService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let currentUser: User;\n    \n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => currentUser = user);\n    if (currentUser){\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      })\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BusyService {\n  busyRequstCount = 0;\n\n  constructor(private spinnerService: NgxUiLoaderService) { }\n\n  busy(){\n    this.busyRequstCount++;\n    this.spinnerService.start();\n  }\n\n  idle(){\n    this.busyRequstCount--;\n    if(this.busyRequstCount <=0) {\n      this.busyRequstCount = 0;\n      this.spinnerService.stop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { BusyService } from '../_services/busy.service';\r\nimport { delay, finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private busyService: BusyService ) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    this.busyService.busy();\r\n    return next.handle(request).pipe(\r\n      finalize(() => {\r\n        this.busyService.idle();\r\n      })\r\n    )\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FileUploader } from 'ng2-file-upload';\nimport { take } from 'rxjs/operators';\nimport { Member } from 'src/app/_models/members';\nimport { Photo } from 'src/app/_models/photo';\nimport { User } from 'src/app/_models/users';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { MembersService } from 'src/app/_services/members.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-photo-editor',\n  templateUrl: './photo-editor.component.html',\n  styleUrls: ['./photo-editor.component.css']\n})\nexport class PhotoEditorComponent implements OnInit {\n  @Input() member : Member\n  uploader: FileUploader;\n  hasBaseDropzoneOver = false;\n  baseUrl =environment.apiUrl\n  user: User;\n\n  constructor(private accountService: AccountService, private memberService: MembersService) {\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => this.user = user);\n   }\n\n  ngOnInit(): void {\n    this.initializeUploader();\n  }\n\n  fileOverBase(e: any){\n    this.hasBaseDropzoneOver = e;\n  }\n\n  setMainPhoto(photo: Photo){\n    this.memberService.setMainPhoto(photo.id).subscribe(() => {\n      this.user.photoUrl = photo.url;\n      this.accountService.setCurrentUser(this.user);\n      this.member.photoUrl = photo.url;\n      this.member.photos.forEach(p => {\n        if (p.isMain) p.isMain = false;\n        if (p.id === photo.id) p.isMain = true;\n      })\n    })\n  }\n\n  deletePhoto(photoId: number) {\n    this.memberService.deletePhoto(photoId).subscribe(() => {\n      this.member.photos = this.member.photos.filter(x => x.id !== photoId);\n    })\n  }\n\n\n  initializeUploader() {\n    this.uploader = new FileUploader({\n      url: this.baseUrl + 'users/add-photo',\n      authToken: 'Bearer ' + this.user.token,\n      isHTML5: true,\n      allowedFileType: ['image'],\n      removeAfterUpload: true,\n      autoUpload: false,\n      maxFileSize: 10 * 1024 * 1024\n    });\n\n    this.uploader.onAfterAddingFile = (file) => {\n      file.withCredentials = false;\n    }\n\n    this.uploader.onSuccessItem = (item, response, status, headers) => {\n      if (response) {\n        const photo: Photo = JSON.parse(response);\n        this.member.photos.push(photo);\n        if (photo.isMain) {\n          this.user.photoUrl = photo.url;\n          this.member.photoUrl = photo.url;\n          this.accountService.setCurrentUser(this.user);\n        }\n      }\n    }\n  }\n\n}\n","export default \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-2 img-wrapper\\\" *ngFor=\\\"let photo of member.photos\\\">\\r\\n    <img\\r\\n      src=\\\"{{ photo.url }}\\\"\\r\\n      alt=\\\"{{ photo.url }}\\\"\\r\\n      class=\\\"img-thumbnail p-1\\\"\\r\\n      [class.not-approved]=\\\"!photo.isApproved\\\"\\r\\n    />\\r\\n\\r\\n    <div class=\\\"text-center img-text\\\" *ngIf=\\\"!photo.isApproved\\\">\\r\\n      <span class=\\\"text-danger\\\">Awaiting approval</span>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"text-center\\\">\\r\\n      <button\\r\\n        [disabled]=\\\"photo.isMain || !photo.isApproved\\\"\\r\\n        (click)=\\\"setMainPhoto(photo)\\\"\\r\\n        [ngClass]=\\\"photo.isMain ? 'btn-success active' : 'btn-outline-success'\\\"\\r\\n        class=\\\"btn btn-sm\\\"\\r\\n      >\\r\\n        Main\\r\\n      </button>\\r\\n      <button\\r\\n        [disabled]=\\\"photo.isMain\\\"\\r\\n        (click)=\\\"deletePhoto(photo.id)\\\"\\r\\n        class=\\\"btn btn-sm btn-danger\\\"\\r\\n      >\\r\\n        <i class=\\\"fa fa-trash\\\"></i>\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row mt-3\\\">\\r\\n  <div class=\\\"col-md-3\\\">\\r\\n    <h3>Add Photos</h3>\\r\\n\\r\\n    <div\\r\\n      ng2FileDrop\\r\\n      [ngClass]=\\\"{ 'nv-file-over': hasBaseDropzoneOver }\\\"\\r\\n      (fileOver)=\\\"fileOverBase($event)\\\"\\r\\n      [uploader]=\\\"uploader\\\"\\r\\n      class=\\\"card bg-faded p-3 text-center mb-3 my-drop-zone\\\"\\r\\n    >\\r\\n      <i class=\\\"fa fa-upload fa-3x\\\"></i>\\r\\n      Drop photos here\\r\\n    </div>\\r\\n\\r\\n    Multiple\\r\\n    <input type=\\\"file\\\" ng2FileSelect [uploader]=\\\"uploader\\\" multiple /><br />\\r\\n\\r\\n    Single\\r\\n    <input type=\\\"file\\\" ng2FileSelect [uploader]=\\\"uploader\\\" />\\r\\n  </div>\\r\\n\\r\\n  <div\\r\\n    class=\\\"col-md-9\\\"\\r\\n    style=\\\"margin-bottom: 40px\\\"\\r\\n    *ngIf=\\\"uploader?.queue?.length\\\"\\r\\n  >\\r\\n    <h3>Upload queue</h3>\\r\\n    <p>Queue length: {{ uploader?.queue?.length }}</p>\\r\\n\\r\\n    <table class=\\\"table\\\">\\r\\n      <thead>\\r\\n        <tr>\\r\\n          <th width=\\\"50%\\\">Name</th>\\r\\n          <th>Size</th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr *ngFor=\\\"let item of uploader.queue\\\">\\r\\n          <td>\\r\\n            <strong>{{ item?.file?.name }}</strong>\\r\\n          </td>\\r\\n          <td *ngIf=\\\"uploader.options.isHTML5\\\" nowrap>\\r\\n            {{ item?.file?.size / 1024 / 1024 | number: \\\".2\\\" }} MB\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n\\r\\n    <div>\\r\\n      <div>\\r\\n        Queue progress:\\r\\n        <div class=\\\"progress\\\">\\r\\n          <div\\r\\n            class=\\\"progress-bar\\\"\\r\\n            role=\\\"progressbar\\\"\\r\\n            [ngStyle]=\\\"{ width: uploader.progress + '%' }\\\"\\r\\n          ></div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <button\\r\\n        type=\\\"button\\\"\\r\\n        class=\\\"btn btn-success btn-s\\\"\\r\\n        (click)=\\\"uploader.uploadAll()\\\"\\r\\n        [disabled]=\\\"!uploader.getNotUploadedItems().length\\\"\\r\\n      >\\r\\n        <span class=\\\"fa fa-upload\\\"></span> Upload all\\r\\n      </button>\\r\\n      <button\\r\\n        type=\\\"button\\\"\\r\\n        class=\\\"btn btn-warning btn-s\\\"\\r\\n        (click)=\\\"uploader.cancelAll()\\\"\\r\\n        [disabled]=\\\"!uploader.isUploading\\\"\\r\\n      >\\r\\n        <span class=\\\"fa fa-ban\\\"></span> Cancel all\\r\\n      </button>\\r\\n      <button\\r\\n        type=\\\"button\\\"\\r\\n        class=\\\"btn btn-danger btn-s\\\"\\r\\n        (click)=\\\"uploader.clearQueue()\\\"\\r\\n        [disabled]=\\\"!uploader.queue.length\\\"\\r\\n      >\\r\\n        <span class=\\\"fa fa-trash\\\"></span> Remove all\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"img.img-thuumbnail {\\r\\n  height: 100ps;\\r\\n  min-width: 100px !important;\\r\\n  margin-bottom: 2px;\\r\\n}\\r\\n\\r\\n\\r\\n.nv-file-over {\\r\\n  border: dotted 3px red;\\r\\n}\\r\\n\\r\\n\\r\\ninput[type=file] {\\r\\n  color: transparent;\\r\\n}\\r\\n\\r\\n\\r\\n.not-approved {\\r\\n  opacity: 0.2;\\r\\n}\\r\\n\\r\\n\\r\\n.img-wrapper {\\r\\n  position: relative\\r\\n}\\r\\n\\r\\n\\r\\n.img-text {\\r\\n  position: absolute;\\r\\n  bottom: 30%;\\r\\n}\\r\\n\";","import { Component, Input, OnInit, Self } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.css']\n})\nexport class TextInputComponent implements ControlValueAccessor {\n  @Input() label: string;\n  @Input() type = 'text';\n\n  constructor(@Self() public ngControl: NgControl) {\n    this.ngControl.valueAccessor = this;\n   }\n\n\n  writeValue(obj: any): void {\n  }\n  registerOnChange(fn: any): void {\n  }\n  registerOnTouched(fn: any): void {\n  }\n\n}\n","export default \"<div class=\\\"form-group\\\">\\n  <input\\n  [class.is-invalid]=\\\"ngControl.touched && ngControl.invalid\\\"\\n  type={{type}}\\n  class=\\\"form-control\\\"\\n  [formControl]=\\\"ngControl.control\\\"\\n  placeholder={{label}}>\\n      <div *ngIf=\\\"ngControl.control.errors?.required\\\" class=\\\"invalid-feedback text-center\\\"> Please enter a {{label}}</div>\\n      <div  *ngIf=\\\"ngControl.control.errors?.minlength\\\" class=\\\"invalid-feedback text-center\\\">\\n        {{label}} must be at least {{ngControl.control.errors.minlength['requiredLength']}}\\n      </div>\\n      <div  *ngIf=\\\"ngControl.control.errors?.maxlength\\\" class=\\\"invalid-feedback text-center\\\">\\n        {{label}} must be at least {{ngControl.control.errors.maxlength['requiredLength']}}\\n      </div>\\n      <div  *ngIf=\\\"ngControl.control.errors?.isMatching\\\" class=\\\"invalid-feedback text-center\\\">\\n        Passwords do not match\\n      </div>\\n</div>\\n\";","export default \"\";","import { Component, Input, OnInit, Self } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { BsDaterangepickerConfig } from 'ngx-bootstrap/datepicker';\n\n@Component({\n  selector: 'app-date-input',\n  templateUrl: './date-input.component.html',\n  styleUrls: ['./date-input.component.css']\n})\nexport class DateInputComponent implements ControlValueAccessor {\n  @Input() label: string;\n  @Input() maxDate: Date;\n  bsConfig: Partial<BsDaterangepickerConfig>;\n\n  constructor(@Self() public ngControl: NgControl) {\n    this.ngControl.valueAccessor = this;\n    this.bsConfig = {\n      containerClass: 'theme-dark-blue',\n      dateInputFormat: 'DD MMM YYYY'\n    }\n  }\n\n  writeValue(obj: any): void {\n\n  }\n  registerOnChange(fn: any): void {\n\n  }\n  registerOnTouched(fn: any): void {\n\n  }\n  setDisabledState?(isDisabled: boolean): void {\n\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","export default \"<div class=\\\"form-group\\\">\\n  <input\\n    type=\\\"text\\\"\\n    [class.is-invalid]='ngControl.touched && ngControl.invalid'\\n    class='form-control'\\n    [formControl]='ngControl.control'\\n    placeholder=\\\"{{label}}\\\"\\n    bsDatepicker\\n    [bsConfig]='bsConfig'\\n    [maxDate]='maxDate'\\n  >\\n\\n  <div *ngIf=\\\"ngControl.control.errors?.required \\\" class=\\\"invalid-feedback\\\">{{label}} is required </div>\\n</div>\\n\";","export default \"\";","import { NgForOf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Message } from 'src/app/_models/message';\nimport { MessageService } from 'src/app/_services/message.service';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-member-messages',\n  templateUrl: './member-messages.component.html',\n  styleUrls: ['./member-messages.component.css']\n})\nexport class MemberMessagesComponent implements OnInit {\n  @ViewChild('messageForm') messageForm: NgForm;\n  @Input() messages: Message[];\n  @Input() username: string;\n  messageContent: string;\n\n  constructor(public messageService: MessageService) { }\n\n  ngOnInit(): void {\n  }\n\n  sendMessage() {\n    this.messageService.sendMessage(this.username, this.messageContent).then(() => {\n      this.messageForm.reset();\n    })\n  }\n\n}\n","export default \"<div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n        <div *ngIf=\\\"(messageService.messageThread$ | async)?.length === 0\\\">\\n            No messages yet... get to saying something\\n        </div>\\n\\n        <ul #scrollMe\\n        style=\\\"overflow:scroll; height: 500px;\\\"\\n        [scrollTop]=\\\"scrollMe.scrollHeight\\\"\\n        class=\\\"chat\\\"\\n         *ngIf=\\\"(messageService.messageThread$ | async).length > 0\\\">\\n          <li *ngFor=\\\"let message of (messageService.messageThread$ | async)\\\">\\n            <div>\\n                <span class=\\\"chat-img float-right\\\">\\n                    <img class=\\\"rounded-circle\\\" src=\\\"{{message.senderPhotoUrl || './assets/user.png'}}\\\"\\n                     alt=\\\"{{message.senderUsername}}\\\" >\\n                </span>\\n                <div class=\\\"chat-body\\\">\\n                    <div class=\\\"header\\\">\\n                        <small class=\\\"text-muted\\\">\\n                            <span class=\\\"fa fa-clock-o\\\">{{message.messageSent | timeago}}</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"!message.dateRead\\n                                  && message.senderUsername !== username\\\">\\n                                  (unread)\\n                            </span>\\n                            <span class=\\\"text-success\\\" *ngIf=\\\"message.dateRead\\n                                  && message.senderUsername !== username\\\">\\n                                  (read {{message.dateRead | timeago}})\\n                            </span>\\n                        </small>\\n                    </div>\\n                    <p>{{message.content}}</p>\\n                </div>\\n            </div>\\n          </li>\\n        </ul>\\n    </div>\\n\\n\\n    <div class=\\\"card-footer\\\">\\n      <form #messageForm=\\\"ngForm\\\" (ngSubmit)=\\\"sendMessage()\\\" autocomplete=\\\"off\\\">\\n          <div class=\\\"input-group\\\">\\n            <input\\n              name=\\\"messageContent\\\"\\n              required\\n              [(ngModel)]=\\\"messageContent\\\"\\n              type=\\\"text\\\"\\n              class=\\\"form-controlo input-sm\\\"\\n              placeholder=\\\"Send a private message\\\">\\n            <div class=\\\"input-group-append\\\">\\n              <button [disabled]=\\\"!messageForm.valid\\\" class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Send</button>\\n            </div>\\n          </div>\\n      </form>\\n    </div>\\n\\n</div>\\n\";","export default \".card {\\r\\n  border: none;\\r\\n}\\r\\n\\r\\n.chat {\\r\\n  list-style: none;\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.chat li {\\r\\n  margin-bottom: 10px;\\r\\n  padding-bottom: 10px;\\r\\n  border-bottom: 1px dotted #b3a9a9;\\r\\n}\\r\\n\\r\\n.rounded-circle {\\r\\n    max-height: 50px;\\r\\n}\\r\\n\\r\\n.chat::-webkit-scrollbar {\\r\\n  display: none;\\r\\n}\\r\\n\\r\\n/* Hide scrollbar for IE, Edge and Firefox */\\r\\n\\r\\n.chat {\\r\\n  -ms-overflow-style: none;  /* IE and Edge */\\r\\n  scrollbar-width: none;  /* Firefox */\\r\\n}\\r\\n\";","import { Input, OnInit, TemplateRef } from '@angular/core';\nimport { Directive, ViewContainerRef } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { User } from '../_models/users';\nimport { AccountService } from '../_services/account.service';\n\n@Directive({\n  selector: '[appHasRole]'\n})\nexport class HasRoleDirective implements OnInit {\n  @Input() appHasRole: string[];\n  user: User;\n\n  constructor(private viewContainerRef: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private accountService: AccountService) {\n        this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n          this.user = user;\n        })\n     }\n\n\n  ngOnInit(): void {\n    // clear view if no roles\n    if (!this.user?.roles || this.user ==null) {\n      this.viewContainerRef.clear();\n      return;\n    }\n\n    if (this.user?.roles.some(r => this.appHasRole.includes(r))) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainerRef.clear()\n    }\n  }\n\n}\n","import { Component, EventEmitter, Input, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { User } from 'src/app/_models/users';\n\n\n@Component({\n  selector: 'app-roles-modal',\n  templateUrl: './roles-modal.component.html',\n  styleUrls: ['./roles-modal.component.css']\n})\nexport class RolesModalComponent implements OnInit {\n  @Input() updateSelectedRoles = new EventEmitter();\n  user: User;\n  roles: any[];\n\n  constructor(public bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n  }\n\n  updateRoles() {\n    this.updateSelectedRoles.emit(this.roles);\n    this.bsModalRef.hide();\n  }\n\n}\n","export default \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title pull-left\\\">Edit roles for {{user.username}}</h4>\\n  <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"bsModalRef.hide()\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <form #roleForm=\\\"ngForm\\\" id=\\\"roleForm\\\">\\n    <div class=\\\"form-check\\\" *ngFor=\\\"let role of roles\\\">\\n      <input type=\\\"checkbox\\\"\\n          class=\\\"form-check-input\\\"\\n          [checked]=\\\"role.checked\\\"\\n          value=\\\"role.name\\\"\\n          (change)=\\\"role.checked = !role.checked\\\"\\n          [disabled]=\\\"role.name === 'Admin' && user.username === 'admin'\\\"\\n      >\\n      <label>{{role.name}}</label>\\n    </div>\\n  </form>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"bsModalRef.hide()\\\">Cancel</button>\\n  <button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"updateRoles()\\\">Submit</button>\\n\\n</div>\\n\";","export default \"\";","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Photo } from '../_models/photo';\r\nimport { User } from '../_models/users';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUserWithRoles(){\r\n    return this.http.get<Partial<User[]>>(this.baseUrl + 'admin/users-with-roles');\r\n  }\r\n\r\n  updateUserRoles(username: string, roles: string []) {\r\n    return this.http.post(this.baseUrl + 'admin/edit-roles/'+username + '?roles=' + roles, {});\r\n  }\r\n\r\n  getPhotosForApproval() {\r\n    return this.http.get<Photo[]>(this.baseUrl + 'admin/photos-to-moderate');\r\n  }\r\n\r\n  approvePhoto(photoId: number) {\r\n    return this.http.post(this.baseUrl + 'admin/approve-photo/' + photoId, {});\r\n  }\r\n\r\n  rejectPhoto(photoId: number) {\r\n    return this.http.post(this.baseUrl + 'admin/reject-photo/' + photoId, {});\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { RolesModalComponent } from 'src/app/modals/roles-modal/roles-modal.component';\nimport { User } from 'src/app/_models/users';\nimport { AdminService } from 'src/app/_services/admin.service';\n\n@Component({\n  selector: 'app-user-management',\n  templateUrl: './user-management.component.html',\n  styleUrls: ['./user-management.component.css']\n})\nexport class UserManagementComponent implements OnInit {\n  users: Partial<User[]>;\n  bsModalRef: BsModalRef;\n\n  constructor(private adminService: AdminService, private modalService: BsModalService) { }\n\n  ngOnInit(): void {\n    this.getUserWithRole();\n  }\n\n  getUserWithRole(){\n    this.adminService.getUserWithRoles().subscribe(users => {\n      this.users = users;\n    })\n  }\n\n  openRoleModal(user: User){\n    const config = {\n      class: 'modal-dialog-centered',\n      initialState: {\n        user,\n        roles: this.getRolesArray(user)\n      }\n    };\n    this.bsModalRef = this.modalService.show(RolesModalComponent, config);\n    this.bsModalRef.content.updateSelectedRoles.subscribe(values => {\n      const rolesToUpdate = {\n        roles: [...values.filter(el => el.checked = true).map(el => el.name)]\n      };\n      if (rolesToUpdate) {\n        this.adminService.updateUserRoles(user.username, rolesToUpdate.roles).subscribe(() => {\n          user.roles = [...rolesToUpdate.roles]\n        })\n      }\n    })\n  }\n\n  private getRolesArray(user){\n    const roles = [];\n    const userRoles = user.roles;\n    const avaliableRoles: any[] = [\n      {name: 'Admin', value:'Admin'},\n      {name: 'Moderator', value:'Moderator'},\n      {name: 'Member', value:'Member'}\n    ];\n\n\n    avaliableRoles.forEach(role => {\n      let isMatch = false;\n      for (const userRole of userRoles) {\n        if (role.name === userRole) {\n          isMatch =true;\n          role.checked = true;\n          roles.push(role);\n          break;\n        }\n      }\n      if (!isMatch) {\n          role.checked = false;\n          roles.push(role);\n      }\n    })\n    return roles\n  }\n\n}\n","export default \"<div class=\\\"row\\\">\\n  <table class=\\\"table\\\">\\n    <tr>\\n        <th style=\\\"width: 30%;\\\">Username</th>\\n        <th style=\\\"width: 40%;\\\">Active roles</th>\\n        <th style=\\\"width: 30%;\\\"></th>\\n    </tr>\\n    <tr *ngFor=\\\"let user of users\\\">\\n      <td>{{user.username}}</td>\\n      <td>{{user.roles}}</td>\\n      <td><button (click)=\\\"openRoleModal(user)\\\" class=\\\"btn btn-info\\\">Edit Roles</button></td>\\n    </tr>\\n  </table>\\n</div>\\n\";","export default \".btn {\\r\\n  color: #2391be;\\r\\n}\\r\\n.btn:hover{\\r\\n  color: white;\\r\\n}\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Photo } from 'src/app/_models/photo';\r\nimport { AdminService } from 'src/app/_services/admin.service';\r\n\r\n@Component({\r\n  selector: 'app-photo-management',\r\n  templateUrl: './photo-management.component.html',\r\n  styleUrls: ['./photo-management.component.css']\r\n})\r\nexport class PhotoManagementComponent implements OnInit {\r\n  photos: Photo[];\r\n\r\n  constructor(private adminService: AdminService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getPhotosForApproval();\r\n  }\r\n\r\n  getPhotosForApproval() {\r\n    this.adminService.getPhotosForApproval().subscribe(photos => {\r\n      this.photos = photos;\r\n    })\r\n  }\r\n\r\n  approvePhoto(photoId) {\r\n    this.adminService.approvePhoto(photoId).subscribe(() => {\r\n      this.photos.splice(this.photos.findIndex(p => p.id === photoId), 1);\r\n    })\r\n  }\r\n\r\n  rejectPhoto(photoId) {\r\n    this.adminService.rejectPhoto(photoId).subscribe(() => {\r\n      this.photos.splice(this.photos.findIndex(p => p.id === photoId), 1);\r\n    })\r\n  }\r\n}\r\n","export default \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-sm-2\\\" *ngFor=\\\"let photo of photos\\\">\\r\\n    <h4>{{ photo.username }}</h4>\\r\\n    <img\\r\\n      src=\\\"{{ photo.url }}\\\"\\r\\n      class=\\\"img-thumbnail p-1\\\"\\r\\n      alt=\\\"{{ photo.username }}\\\"\\r\\n    />\\r\\n    <div class=\\\"text-center\\\">\\r\\n      <button\\r\\n        class=\\\"btn btn-sm btn-success mr-1\\\"\\r\\n        (click)=\\\"approvePhoto(photo.id)\\\"\\r\\n      >\\r\\n        Approve\\r\\n      </button>\\r\\n      <button class=\\\"btn btn-sm btn- danger\\\" (click)=\\\"rejectPhoto(photo.id)\\\">\\r\\n        Reject\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \"img.img-thumbnail {\\r\\n  height: 150px;\\r\\n  min-width: 150px !important;\\r\\n  margin-bottom: 2px;\\r\\n}\\r\\n\";","import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport {ToastrModule} from 'ngx-toastr';\n\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NavComponent } from './nav/nav.component';\nimport { HomeComponent } from './home/home.component';\nimport { RegisterComponent } from './register/register.component';\n\nimport { ListsComponent } from './lists/lists.component';\nimport { MessagesComponent } from './messages/messages.component';\n\nimport { MemberListComponent } from './members/member-list/member-list.component';\nimport { MemberDetailsComponent } from './members/member-details/member-details.component';\nimport { MemberCardComponent } from './members/member-card/member-card.component';\n\nimport { SharedModule } from './_modules/shared.module';\n\nimport { ErrorInterceptor } from './_interceptors/error.interceptor';\nimport { JwtInterceptor } from './_interceptors/jwt.interceptor';\n\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\nimport { ServerErrorComponent } from './errors/server-error/server-error.component';\nimport { TestErrorsComponent } from './errors/test-errors/test-errors.component';\n\nimport { MemberEditComponent } from './members/member-edit/member-edit.component';\n\nimport { NgxUiLoaderModule, SPINNER } from \"ngx-ui-loader\";\n\nimport { LoadingInterceptor } from './_interceptors/loading.interceptor';\nimport { PhotoEditorComponent } from './members/photo-editor/photo-editor.component';\nimport { TextInputComponent } from './_forms/text-input/text-input.component';\nimport { DateInputComponent } from './_forms/date-input/date-input.component';\nimport { MemberMessagesComponent } from './members/member-messages/member-messages.component';\nimport { AdminPanelComponent } from './admin/admin-panel/admin-panel.component';\nimport { HasRoleDirective } from './_directives/has-role.directive';\nimport { UserManagementComponent } from './admin/user-management/user-management.component';\nimport { PhotoManagementComponent } from './admin/photo-management/photo-management.component';\nimport { RolesModalComponent } from './modals/roles-modal/roles-modal.component';\nimport { ConfirmDialogComponent } from './modals/confirm-dialog/confirm-dialog.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavComponent,\n    HomeComponent,\n    RegisterComponent,\n    MemberListComponent,\n    MemberDetailsComponent,\n    ListsComponent,\n    MessagesComponent,\n    TestErrorsComponent,\n    NotFoundComponent,\n    ServerErrorComponent,\n    MemberCardComponent,\n    MemberEditComponent,\n    PhotoEditorComponent,\n    TextInputComponent,\n    DateInputComponent,\n    MemberMessagesComponent,\n    AdminPanelComponent,\n    HasRoleDirective,\n    UserManagementComponent,\n    PhotoManagementComponent,\n    RolesModalComponent,\n    ConfirmDialogComponent\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    NgxUiLoaderModule\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi:true},\n    {provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi:true},\n    {provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi:true}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}
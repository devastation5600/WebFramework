(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(e,t,n){e.exports=n("zUnb")},zUnb:function(e,t,n){"use strict";n.r(t);var r=n("fXoL"),s=n("a3Wg"),a=n("mrSG"),o=n("tk/3"),i=n("jhN1"),l=n("tyNb");let c=class{constructor(){}ngOnInit(){}};c.ctorParameters=()=>[],c=Object(a.a)([Object(r.o)({selector:"app-admin-panel",template:'<h2>Admin panel</h2>\n\n<div class="tab-panel">\n  <tabset class="memeber-tabset">\n      <tab heading=\'User management\' *appHasRole=\'["Admin"]\'>\n        <div class="container">\n          <app-user-management></app-user-management>\n        </div>\n      </tab>\n      <tab heading=\'Photo management\' *appHasRole=\'["Admin", "Moderator"]\'>\n        <div class="container">\n          <app-photo-management></app-photo-management>\n        </div>\n      </tab>\n  </tabset>\n</div>\n',styles:[""]})],c);let m=class{constructor(){}ngOnInit(){}};m.ctorParameters=()=>[],m=Object(a.a)([Object(r.o)({selector:"app-not-found",template:'<div class="container">\n  <h1>Not Found</h1>\n  <button class="btn btn-info btn-lg" routerLink=\'/\'>Return to home page</button>\n</div>\n',styles:[""]})],m);let d=class{constructor(e){var t,n;this.router=e;const r=this.router.getCurrentNavigation();this.error=null===(n=null===(t=null==r?void 0:r.extras)||void 0===t?void 0:t.state)||void 0===n?void 0:n.error}ngOnInit(){}};d.ctorParameters=()=>[{type:l.f}],d=Object(a.a)([Object(r.o)({selector:"app-server-error",template:'<h4>Internal Server error - refreshing the page will make the error disappear!</h4>\n\n<ng-container>\n  <h5 class="text-danger">Error: {{error.message}}</h5>\n  <p class="font-weight-bold">Note if you are seeing this then Angular is probably to blame </p>\n  <p>What to do next</p>\n  <ol>\n    <li>Open the chrome dev tools</li>\n    <li>Inspect the network tab</li>\n    <li>Check the failing request</li>\n    <li>Examin the request URL- make sure it is correct</li>\n    <li>Reproduce the error in Postman - if wee see the same response, then the issue is not with Angular</li>\n  </ol>\n  <p>Following is the stack trace - this is where your investigation should start!</p>\n  <code class="mt-5" style="background-color: whitesmoke;">{{error.details}}</code>\n</ng-container>\n',styles:[""]})],d);const p="api/";let u=class{constructor(e){this.http=e,this.baseUrl=p,this.validationErrors=[]}ngOnInit(){}get404Error(){this.http.get(this.baseUrl+"buggy/not-found").subscribe(e=>{console.log(e)},e=>{console.log(e)})}get500Error(){this.http.get(this.baseUrl+"buggy/server-error").subscribe(e=>{console.log(e)},e=>{console.log(e)})}get401Error(){this.http.get(this.baseUrl+"buggy/auth").subscribe(e=>{console.log(e)},e=>{console.log(e)})}get400ValidationError(){this.http.post(this.baseUrl+"account/register",{}).subscribe(e=>{console.log(e)},e=>{console.log(e),this.validationErrors=e})}get400Error(){this.http.get(this.baseUrl+"buggy/bad-request").subscribe(e=>{console.log(e)},e=>{console.log(e)})}};u.ctorParameters=()=>[{type:o.b}],u=Object(a.a)([Object(r.o)({selector:"app-test-errors",template:"<ng-container >\n  <button (click)='get500Error()' class=\"btn btn-outline-primary mr-3\">Test 500 Error</button>\n  <button (click)='get400ValidationError() ' class=\"btn btn-outline-primary mr-3\">Test 400 Validation Error</button>\n  <button (click)='get404Error()' class=\"btn btn-outline-primary mr-3\">Test 404 Error</button>\n  <button (click)='get401Error()' class=\"btn btn-outline-primary mr-3\">Test 401 Error</button>\n  <button (click)='get400Error()' class=\"btn btn-outline-primary mr-3\">Test 400 Error</button>\n\n   <div class=\"row mt-5\" *ngIf='validationErrors.length'>\n     <ul class=\"tex-danger\">\n       <li *ngFor='let error of validationErrors'>\n         {{error}}\n       </li>\n     </ul>\n   </div>\n</ng-container>\n",styles:[""]})],u);let b=class{constructor(){this.registerMode=!1}ngOnInit(){}registerToggle(){this.registerMode=!this.registerMode}cancelRegisterMode(e){this.registerMode=e}};b.ctorParameters=()=>[],b=Object(a.a)([Object(r.o)({selector:"app-home",template:'<div class="container mt-4">\n  <div *ngIf=\'!registerMode\' style="text-align: center;">\n    <h1>Find your match</h1>\n    <p class="lead"> Come on in to view your matches..... all you need to do is sign up</p>\n    <div class="text-center">\n          <button (click)="registerToggle()" class="btn btn-primary btn-lg mr-2">Register</button>\n          <button class="btn btn-info btn-lg ">Learn more</button>\n    </div>\n  </div>\n\n  <div *ngIf="registerMode" class="container">\n    <div class="row justify-content-center">\n      <div class=\'col-4\'>\n          <app-register (cancelRegister)="cancelRegisterMode($event)"></app-register>\n      </div>\n    </div>\n  </div>\n</div>\n',styles:[""]})],b);var h=n("LRne"),g=n("IzEk"),v=n("lJxs");const f=!0,y="api/",x="hub/";class O{constructor(e){this.minAge=18,this.maxAge=99,this.pageNumber=1,this.pageSize=10,this.orderBy="lastActive",this.gender="female"===e.gender?"male":"female"}}var w=n("jtHE"),k=n("6HpG"),S=n("5eHb"),M=n("2Vo4");let U=class{constructor(e,t){this.toastr=e,this.router=t,this.hubUrl=x,this.onlineUserSource=new M.a([]),this.onlineUsers$=this.onlineUserSource.asObservable()}createHubConnection(e){this.hubConnection=(new k.a).withUrl(this.hubUrl+"presence",{accessTokenFactory:()=>e.token}).withAutomaticReconnect().build(),this.hubConnection.start().catch(e=>console.log(e)),this.hubConnection.on("UserIsOnline",e=>{this.onlineUsers$.pipe(Object(g.a)(1)).subscribe(t=>{this.onlineUserSource.next([...t,e])})}),this.hubConnection.on("UserIsOffline",e=>{this.onlineUsers$.pipe(Object(g.a)(1)).subscribe(t=>{this.onlineUserSource.next([...t.filter(t=>t!==e)])})}),this.hubConnection.on("GetOnlineUsers",e=>{this.onlineUserSource.next(e)}),this.hubConnection.on("NewMessageReceived",({username:e,knownAs:t})=>{this.toastr.info(t+" has sent you a new message!").onTap.pipe(Object(g.a)(1)).subscribe(()=>this.router.navigateByUrl("/members/"+e+"?tab=3"))})}stopHubConnection(){this.hubConnection.stop().catch(e=>console.log(e))}};U.ctorParameters=()=>[{type:S.b},{type:l.f}],U=Object(a.a)([Object(r.E)({providedIn:"root"})],U);let P=class{constructor(e,t){this.http=e,this.presence=t,this.baseUrl=y,this.currentUserSource=new w.a(1),this.currentUser$=this.currentUserSource.asObservable()}login(e){return this.http.post(this.baseUrl+"account/login",e).pipe(Object(v.a)(e=>{const t=e;t&&(this.setCurrentUser(t),this.presence.createHubConnection(t))}))}register(e){return this.http.post(this.baseUrl+"account/register",e).pipe(Object(v.a)(e=>{e&&(this.setCurrentUser(e),this.presence.createHubConnection(e))}))}setCurrentUser(e){e.roles=[];const t=this.getDecodedToken(e.token).role;Array.isArray(t)?e.roles=t:e.roles.push(t),localStorage.setItem("user",JSON.stringify(e)),this.currentUserSource.next(e)}logout(){localStorage.removeItem("user"),this.currentUserSource.next(null),this.presence.stopHubConnection()}getDecodedToken(e){return JSON.parse(atob(e.split(".")[1]))}};P.ctorParameters=()=>[{type:o.b},{type:U}],P=Object(a.a)([Object(r.E)({providedIn:"root"})],P);class j{}function C(e,t,n){const r=new j;return n.get(e,{observe:"response",params:t}).pipe(Object(v.a)(e=>(r.result=e.body,null!==e.headers.get("Pagination")&&(r.pagination=JSON.parse(e.headers.get("Pagination"))),r)))}function I(e,t){let n=new o.d;return n=n.append("pageNumber",e.toString()),n=n.append("pageSize",t.toString()),n}let R=class{constructor(e,t){this.http=e,this.accountService=t,this.baseUrl=y,this.memberCache=new Map,this.accountService.currentUser$.pipe(Object(g.a)(1)).subscribe(e=>{this.user=e,this.userParams=new O(e)})}getUserParams(){return this.userParams}setUserParams(e){this.userParams=e}resetUserParams(){return this.userParams=new O(this.user),this.userParams}setMainPhoto(e){return this.http.put(this.baseUrl+"users/set-main-photo/"+e,{})}deletePhoto(e){return this.http.delete(this.baseUrl+"users/delete-photo/"+e)}addLike(e){return this.http.post(this.baseUrl+"likes/"+e,{})}getLikes(e,t,n){let r=I(t,n);return r=r.append("predicate",e),C(this.baseUrl+"likes",r,this.http)}getMember(e){const t=[...this.memberCache.values()].reduce((e,t)=>e.concat(t.result),[]).find(t=>t.username===e);return t?Object(h.a)(t):this.http.get(this.baseUrl+"users/"+e)}updateMember(e){return this.http.put(this.baseUrl+"users/",e).pipe(Object(v.a)(()=>{const t=this.members.indexOf(e);this.members[t]=e}))}getMembers(e){var t=this.memberCache.get(Object.values(e).join("-"));if(t)return Object(h.a)(t);let n=I(e.pageNumber,e.pageSize);return n=n.append("minAge",e.minAge.toString()),n=n.append("maxAge",e.maxAge.toString()),n=n.append("gender",e.gender),n=n.append("orderBy",e.orderBy),C(this.baseUrl+"users",n,this.http).pipe(Object(v.a)(t=>(this.memberCache.set(Object.values(e).join("-"),t),t)))}};R.ctorParameters=()=>[{type:o.b},{type:P}],R=Object(a.a)([Object(r.E)({providedIn:"root"})],R);let A=class{constructor(e){this.memberService=e,this.predicate="liked",this.pageNumber=1,this.pageSize=10}ngOnInit(){this.loadLikes()}loadLikes(){this.memberService.getLikes(this.predicate,this.pageNumber,this.pageSize).subscribe(e=>{this.members=e.result,this.pagination=e.pagination})}pageChanged(e){this.pageNumber=e.page}};A.ctorParameters=()=>[{type:R}],A=Object(a.a)([Object(r.o)({selector:"app-lists",template:'<div class="text-center mt-3">\n    <h2>{{predicate === \'liked\' ? \'Members I like\' : \'Members who like me\'}}</h2>\n</div>\n\n<div class="container mt-3">\n  <div class="row">\n    <div class="btn-group" name="predicate">\n      <button class="btn btn-primary" btnRadio="liked"\n        [(ngModel)]="predicate" (click)="loadLikes()"> Members I like</button>\n      <button class="btn btn-primary" btnRadio="likedBy"\n        [(ngModel)]="predicate" (click)="loadLikes()"> Members who like me</button>\n    </div>\n  </div>\n\n  <div class="row mt-3">\n    <div class="col-2" *ngFor="let member of members">\n        <app-member-card [member]="member"></app-member-card>\n    </div>\n  </div>\n</div>\n\n<div class="d-flex justify-content-center" *ngIf="pagination">\n  <pagination\n  [boundaryLinks]="true"\n  [totalItems]="pagination.TotalItems"\n  [itemsPerPage]="pagination.ItemsPerPage"\n  [(ngModel)]="pagination.CurrentPage"\n  (pageChanged)="pageChanged($event)"\n  previousText="&lsaquo;"\n  nextText="&rsaquo;"\n  firstText="&laquo;"\n  lastText="&raquo;">\n</pagination>\n</div>\n',styles:[""]})],A);var T=n("XGsO"),F=n("HaE+");let E=class{constructor(e){this.http=e,this.baseUrl=y,this.hubUrl=x,this.messageThreadSource=new M.a([]),this.messageThread$=this.messageThreadSource.asObservable()}createHubConnection(e,t){this.hubConnection=(new k.a).withUrl(this.hubUrl+"message?user="+t,{accessTokenFactory:()=>e.token}).withAutomaticReconnect().build(),this.hubConnection.start().catch(e=>console.log(e)),this.hubConnection.on("ReceiveMessageThread",e=>{this.messageThreadSource.next(e)}),this.hubConnection.on("NewMessage",e=>{this.messageThread$.pipe(Object(g.a)(1)).subscribe(t=>{this.messageThreadSource.next([...t,e])})}),this.hubConnection.on("UpdatedGroup",e=>{e.connections.some(e=>e.username===t)&&this.messageThread$.pipe(Object(g.a)(1)).subscribe(e=>{e.forEach(e=>{e.dateRead||(e.dateRead=new Date(Date.now()))}),this.messageThreadSource.next([...e])})})}stopHubConnection(){this.hubConnection&&this.hubConnection.stop()}getMessages(e,t,n){let r=I(e,t);return r=r.append("Container",n),C(this.baseUrl+"messages",r,this.http)}getMessageThread(e){return this.http.get(this.baseUrl+"messages/thread/"+e)}sendMessage(e,t){var n=this;return Object(F.a)(function*(){return n.hubConnection.invoke("SendMessage",{recipientUsername:e,content:t}).catch(e=>console.log(e))})()}deleteMessage(e){return this.http.delete(this.baseUrl+"messages/"+e)}};E.ctorParameters=()=>[{type:o.b}],E=Object(a.a)([Object(r.E)({providedIn:"root"})],E);let L=class{constructor(e,t,n,r,s){this.presence=e,this.route=t,this.messageService=n,this.accountService=r,this.router=s,this.messages=[],this.accountService.currentUser$.pipe(Object(g.a)(1)).subscribe(e=>this.user=e),this.router.routeReuseStrategy.shouldReuseRoute=()=>!1}ngOnInit(){this.route.data.subscribe(e=>{this.member=e.member}),this.route.queryParams.subscribe(e=>{e.tab?this.selectTab(e.tab):this.selectTab(0)}),this.galleryOptions=[{width:"500px",height:"500px",imagePercent:100,thumbnailsColumns:4,imageAnimation:T.a.Slide,preview:!1}],this.galleryImages=this.getImages()}getImages(){const e=[];for(const t of this.member.photos)e.push({small:null==t?void 0:t.url,medium:null==t?void 0:t.url,big:null==t?void 0:t.url});return e}loadMessages(){this.messageService.getMessageThread(this.member.username).subscribe(e=>{this.messages=e})}selectTab(e){this.memberTabs.tabs[e].active=!0}onTabActivated(e){this.activeTab=e,"Messages"===this.activeTab.heading&&0===this.messages.length?this.messageService.createHubConnection(this.user,this.member.username):this.messageService.stopHubConnection()}ngOnDestroy(){this.messageService.stopHubConnection()}};L.ctorParameters=()=>[{type:U},{type:l.a},{type:E},{type:P},{type:l.f}],L.propDecorators={memberTabs:[{type:r.nb,args:["memberTabs",{static:!0}]}]},L=Object(a.a)([Object(r.o)({selector:"app-member-details",template:'<div class="row">\n    <div class="col-4" >\n      <div class="card">\n        <img src="{{member.photoUrl || \'./assest/user.png\'}}" alt="{{member.knownAs}}" class="card-img-top img-thumbnail">\n        <div class="card-body">\n          <div class="mb-2" *ngIf="(presence.onlineUsers$ | async).includes(member.username)">\n            <i class="fa fa-user-circle text-success"></i>Online now\n          </div>\n            <div>\n                <strong>Location:</strong>\n                <p>{{member.city}}, {{member.country}}</p>\n            </div>\n            <div>\n              <strong>Age:</strong>\n              <p>{{member.age}}</p>\n          </div>\n          <div>\n            <strong>Last Active:</strong>\n            <p>{{member.lastActive | timeago}}</p>\n          </div>\n          <div>\n            <strong>Member since:</strong>\n            <p>{{member.created | date: \'dd MMM yyyy\'}}</p>\n          </div>\n        </div>\n        <div class="card-footer">\n            <div class="btn-group d-flex">\n              <button class="btn btn-primary">Like</button>\n              <button class="btn btn-success" (click)="selectTab(3)" >Message</button>\n            </div>\n        </div>\n      </div>\n    </div>\n\n    <div class="col-8">\n      <tabset class="member-tabset" #memberTabs>\n          <tab heading=\'About {{member.knownAs}}\' (selectTab)="onTabActivated($event)">\n            <h4>Description</h4>\n            <p>{{member.introduction}}</p>\n            <h4>Looking for</h4>\n            <p>{{member.lookingFor}}</p>\n          </tab>\n          <tab heading=\'Intrest\' (selectTab)="onTabActivated($event)">\n            <h4>Interest</h4>\n            <p>{{member.intrests}}</p>\n          </tab>\n          <tab heading=\'Photos\' (selectTab)="onTabActivated($event)">\n            <ngx-gallery [options]="galleryOptions" [images]="galleryImages"\n            style="display: inline-block; margin-bottom: 20px;"></ngx-gallery>\n          </tab>\n          <tab heading=\'Messages\' (selectTab)="onTabActivated($event)">\n            <app-member-messages [username]="member.username" ></app-member-messages>\n          </tab>\n      </tabset>\n    </div>\n</div>\n',styles:[".img-thumbnail {\r\n  margin:25px;\r\n  width: 85%;\r\n  height: 85%;\r\n}\r\n\r\n.card-body {\r\n  padding: 0 25px;\r\n}\r\n\r\n.card-footer {\r\n  padding: 10px 15px;\r\n  background-color: #ffff;\r\n  border-top:  none ;\r\n}\r\n"]})],L);let D=class{constructor(e,t,n){this.accountService=e,this.memberService=t,this.toastr=n,this.accountService.currentUser$.pipe(Object(g.a)(1)).subscribe(e=>this.user=e)}unloadNotification(e){this.editForm.dirty&&(e.returnValue=!0)}ngOnInit(){this.loadMember()}loadMember(){this.memberService.getMember(this.user.username).subscribe(e=>{this.member=e})}updateMember(){this.memberService.updateMember(this.member).subscribe(()=>{this.toastr.success("Profile updated successfully"),this.editForm.reset(this.member)})}};D.ctorParameters=()=>[{type:P},{type:R},{type:S.b}],D.propDecorators={editForm:[{type:r.nb,args:["editForm"]}],unloadNotification:[{type:r.A,args:["window:beforeunload",["$event"]]}]},D=Object(a.a)([Object(r.o)({selector:"app-member-edit",template:'<div class="row" *ngIf="member">\n  <div class="col-4">\n    <h1>Your Profile</h1>\n  </div>\n  <div class="col-8">\n    <div class="alert alert-info" *ngIf="editForm.dirty">\n    <strong>Information:</strong> You have made changes. Any unsaved changes will be lost\n    </div>\n  </div>\n  <div class="col-4" >\n    <div class="card">\n      <img src="{{member.photoUrl || \'./assest/user.png\'}}" alt="{{member.knownAs}}" class="card-img-top img-thumbnail">\n      <div class="card-body">\n          <div>\n              <strong>Location:</strong>\n              <p>{{member.city}}, {{member.country}}</p>\n          </div>\n          <div>\n            <strong>Age:</strong>\n            <p>{{member.age}}</p>\n        </div>\n        <div>\n          <strong>Last Active:</strong>\n          <p>{{member.lastActive}}</p>\n        </div>\n        <div>\n          <strong>Member since:</strong>\n          <p>{{member.created}}</p>\n        </div>\n      </div>\n      <div class="card-footer">\n        <button [disabled]="!editForm.dirty" form=\'editForm\' type="submit" class="btn btn-success btn-block">Save Changes</button>\n      </div>\n    </div>\n  </div>\n\n  <div class="col-8">\n    <tabset class="member-tabset">\n        <tab heading=\'About {{member.knownAs}}\'>\n            <form #editForm="ngForm" id=\'editForm\' (ngSubmit)=\'updateMember()\'>\n              <h4>Description</h4>\n              <textarea  class="form-control" [(ngModel)]="member.introduction" name="introduction" rows="6"></textarea>\n              <h4>Looking for</h4>\n              <textarea class="form-control" [(ngModel)]="member.lookingFor" name="lookingFor" rows="6"></textarea>\n              <h4 class="mt-2">Interest</h4>\n              <textarea class="form-control" [(ngModel)]="member.intrests" name="intrests" rows="6"></textarea>\n              <h4 class="mt-2">Location Details: </h4>\n              <div class="form-inline">\n                  <label for="city">City: </label>\n                  <input [(ngModel)]="member.city"  type="text" name="city" class="form-control mx-2">\n                  <label for="country">Country: </label>\n                  <input [(ngModel)]="member.country" type="text" name="country" class="form-control mx-2">\n              </div>\n            </form>\n        </tab>\n        <tab heading=\'Edit Photos\'>\n          <app-photo-editor [member]="member"></app-photo-editor>\n        </tab>\n    </tabset>\n  </div>\n</div>\n',styles:[".img-thumbnail {\r\n  margin:25px;\r\n  width: 85%;\r\n  height: 85%;\r\n}\r\n\r\n.card-body {\r\n  padding: 0 25px;\r\n}\r\n\r\n.card-footer {\r\n  padding: 10px 15px;\r\n  background-color: #ffff;\r\n  border-top:  none ;\r\n}\r\n"]})],D);let q=class{constructor(e){this.memberService=e,this.genderList=[{value:"male",display:"Males"},{value:"female",display:"Females"}],this.userParams=this.memberService.getUserParams()}ngOnInit(){this.loadMembers()}loadMembers(){this.memberService.setUserParams(this.userParams),this.memberService.getMembers(this.userParams).subscribe(e=>{this.members=e.result,this.pagination=e.pagination})}resetFilters(){this.userParams=this.memberService.resetUserParams(),this.loadMembers()}pageChanged(e){this.userParams.pageNumber=e.page,this.memberService.setUserParams(this.userParams),this.loadMembers()}};q.ctorParameters=()=>[{type:R}],q=Object(a.a)([Object(r.o)({selector:"app-member-list",template:'<div class="text-center mt-3">\n  <h2>Your matches - {{pagination?.totalItems}} found</h2>\n</div>\n\n<div class="container mt-3">\n  <form #form="ngForm" class="form-inline mb-3" (ngSubmit)="loadMembers()" autocomplete="off">\n    <div class="form-group">\n      <label > Age from: </label>\n      <input type="number" name="minAge" class="form-control ml-1" style=" width: 70px;" [(ngModel)]="userParams.minAge">\n    </div>\n\n    <div class="form-group px-2">\n      <label > Age to: </label>\n      <input type="number" name="maxAge" class="form-control ml-1" style=" width: 70px;" [(ngModel)]="userParams.maxAge">\n    </div>\n\n    <div class="form-group px-2">\n      <label> Show: </label>\n      <select name="gender" style="width: 130px"[(ngModel)]="userParams.gender"  class="form-control ml-1">\n          <option *ngFor="let gender of genderList" [value]="gender.value">\n            {{gender.display}}\n          </option>\n      </select>\n    </div>\n\n    <button class="btn btn-primary ml-1 px-2" type="submit">Apply Filter</button>\n    <button (click)="resetFilters()" class="btn btn-info ml-1" type="submit">Reset Filter</button>\n\n    <div class="col">\n      <div class="btn-group float-right">\n        <button\n        type="button"\n        class="btn btn-primary"\n        name="orderBy"\n        (click)="loadMembers()"\n        btnRadio= \'lastActive\'\n        [(ngModel)]="userParams.orderBy"\n        >Last Active </button>\n\n        <button\n        type="button"\n        class="btn btn-primary"\n        name="orderBy"\n        (click)="loadMembers()"\n        btnRadio= \'created\'\n        [(ngModel)]="userParams.orderBy"\n        >Newest Members</button>\n\n      </div>\n    </div>\n\n  </form>\n</div>\n\n<div class="row">\n  <div *ngFor="let member of members" class="col-2">\n    <app-member-card [member]="member"></app-member-card>\n  </div>\n</div>\n\n<div class="d-flex justify-content-center" *ngIf="pagination">\n  <pagination\n  [boundaryLinks]="true"\n  [totalItems]="pagination.TotalItems"\n  [itemsPerPage]="pagination.ItemsPerPage"\n  [(ngModel)]="pagination.CurrentPage"\n  (pageChanged)="pageChanged($event)"\n  previousText="&lsaquo;"\n  nextText="&rsaquo;"\n  firstText="&laquo;"\n  lastText="&raquo;">\n</pagination>\n</div>\n',styles:[""]})],q);var H=n("K3ix"),$=n("HDdC");let N=class{constructor(e){this.bsModalRef=e}ngOnInit(){}confirm(){this.result=!0,this.bsModalRef.hide()}decline(){this.result=!1,this.bsModalRef.hide()}};N.ctorParameters=()=>[{type:H.a}],N=Object(a.a)([Object(r.o)({selector:"app-confirm-dialog",template:'<div class="modal-header">\n  <h4 class="modal-title pull-left">{{title}}</h4>\n</div>\n<div class="modal-body">\n  <p>{{message}}</p>\n</div>\n<div class="modal-footer">\n  <button type="button" class="btn btn-default" (click)="confirm()">{{btnOkText}}</button>\n  <button type="button" class="btn btn-default" (click)="decline()">{{btnCancelText}}</button>\n</div>\n',styles:[""]})],N);let z=class{constructor(e){this.modalService=e}confirm(e="Confirmation",t="Are you sure you want to do this?",n="Ok",r="Cancel"){const s={initialState:{title:e,message:t,btnOkText:n,btnCancelText:r}};return this.bsModalRef=this.modalService.show(N,s),new $.a(this.getResult())}getResult(){return e=>{const t=this.bsModalRef.onHidden.subscribe(()=>{e.next(this.bsModalRef.content.result),e.complet()});return{unsubscribe(){t.unsubscribe()}}}}};z.ctorParameters=()=>[{type:H.b}],z=Object(a.a)([Object(r.E)({providedIn:"root"})],z);let B=class{constructor(e,t){this.messageService=e,this.confirmService=t,this.messages=[],this.container="Unread",this.pageNumber=1,this.pageSize=5,this.loading=!1}ngOnInit(){this.loadMessages()}loadMessages(){this.loading=!0,this.messageService.getMessages(this.pageNumber,this.pageSize,this.container).subscribe(e=>{this.messages=e.result,this.pagination=e.pagination,this.loading=!1})}deleteMessage(e){this.confirmService.confirm("Confirm delete message","This cannot be undone").subscribe(t=>{t&&this.messageService.deleteMessage(e).subscribe(()=>{this.messages.splice(this.messages.findIndex(t=>t.id===e),1)})})}pageChanged(e){this.pageNumber=e.page,this.loadMessages()}};B.ctorParameters=()=>[{type:E},{type:z}],B=Object(a.a)([Object(r.o)({selector:"app-messages",template:'<div class="row mb-4">\n  <div class="btn-group" name=\'container\'>\n    <button class="btn btn-primary" btnRadio=\'Unread\' [(ngModel)]="container"\n     (click)="loadMessages()">\n      <i class="fa fa-envelope"></i> Unread\n    </button>\n    <button class="btn btn-primary" btnRadio=\'Inbox\' [(ngModel)]="container"\n    (click)="loadMessages()">\n     <i class="fa fa-envelope-open"></i> Inbox\n   </button>\n   <button class="btn btn-primary" btnRadio=\'Outbox\' [(ngModel)]="container"\n   (click)="loadMessages()">\n    <i class="fa fa-paper-plane"></i> Outbox\n  </button>\n  </div>\n</div>\n\n<div class="row" *ngIf="messages?.length === 0" >\n    <h3>No Messages</h3>\n</div>\n\n<div class="row" *ngIf="messages?.length > 0">\n    <table class="table table-hover" style="cursor: pointer">\n      <tr>\n        <th style="width: 40%; color: white">Message</th>\n        <th style="width: 20%; color: white">From / To</th>\n        <th style="width: 20%; color: white">Sent / Receive</th>\n        <th style="width: 20%; color: white"></th>\n      </tr>\n      <tr [hidden]="loading" *ngFor="let message of messages"\n          routerLink=\'{{container === "Outbox"\n             ? "/members/" + message.recipientUsername\n             : "/members/" + message.senderUsername}}\' [queryParams]=\'{tab:3}\'>\n             <td>{{message.content}}</td>\n             <td>\n              <div *ngIf="container === \'Outbox\'">\n                    <img\n                    class="img-circle rounded-circle mr-2"\n                     src="{{message.recipientPhotoUrl || \'./assets/user.png\'}}"\n                     alt="{{message.recipientUsername}}">\n                     <strong>{{message.recipientUsername | titlecase}}</strong>\n              </div>\n              <div *ngIf="container !== \'Outbox\'">\n                <img\n                class="img-circle rounded-circle mr-2"\n                 src="{{message.senderPhotoUrl || \'./assets/user.png\'}}"\n                 alt="{{message.senderUsername}}">\n                 <strong>{{message.senderUsername | titlecase}}</strong>\n              </div>\n             </td>\n             <td>{{message.messageSent | timeago}}</td>\n             <td>\n                  <button (click)="$event.stopPropagation()" (click)="deleteMessage(message.id)" class="btn btn-danger">Delete</button>\n             </td>\n      </tr>\n    </table>\n</div>\n\n<div class="d-flex justify-content-center" *ngIf="pagination && !loading">\n  <pagination\n    [boundaryLinks]="true"\n    [totalItems]="pagination.totalItems"\n    [itemsPerPage]="pagination.itemsPerPage"\n    [(ngModel)]="pagination.currentPage"\n    (pageChanged)="pageChanged($event)"\n    previousText="&lsaquo;"\n    nextText="&rsaquo;"\n    firstText="&laquo;"\n    lastText="&raquo;">\n  </pagination>\n</div>\n',styles:[".img-circle{\r\n  max-height: 50px;\r\n}\r\n\r\n\r\n.btn-danger {\r\n  color: red;\r\n}\r\n\r\n\r\n.btn:hover{\r\n  color: white;\r\n}\r\n"]})],B);let Y=class{constructor(e,t){this.accountService=e,this.toastr=t}canActivate(){return this.accountService.currentUser$.pipe(Object(v.a)(e=>{if(e.roles.includes("Admin")||e.roles.includes("Moderator"))return!0;this.toastr.error("You cannot enter this area")}))}};Y.ctorParameters=()=>[{type:P},{type:S.b}],Y=Object(a.a)([Object(r.E)({providedIn:"root"})],Y);let V=class{constructor(e,t){this.accountService=e,this.toastr=t}canActivate(){return this.accountService.currentUser$.pipe(Object(v.a)(e=>(e||this.toastr.error("You shant pass"),!!e)))}};V.ctorParameters=()=>[{type:P},{type:S.b}],V=Object(a.a)([Object(r.E)({providedIn:"root"})],V);let J=class{constructor(e){this.confirmService=e}canDeactivate(e){return!e.editForm.dirty||this.confirmService.confirm()}};J.ctorParameters=()=>[{type:z}],J=Object(a.a)([Object(r.E)({providedIn:"root"})],J);let G=class{constructor(e){this.memberService=e}resolve(e){return this.memberService.getMember(e.paramMap.get("username"))}};G.ctorParameters=()=>[{type:R}],G=Object(a.a)([Object(r.E)({providedIn:"root"})],G);const W=[{path:"",component:b},{path:"",runGuardsAndResolvers:"always",canActivate:[V],children:[{path:"members",component:q},{path:"members/:username",component:L,resolve:{member:G}},{path:"member/edit",component:D,canDeactivate:[J]},{path:"lists",component:A},{path:"messages",component:B},{path:"admin",component:c,canActivate:[Y]}]},{path:"errors",component:u},{path:"not-found",component:m},{path:"server-error",component:d},{path:"**",component:m,pathMatch:"full"}];let K=class{};K=Object(a.a)([Object(r.M)({imports:[l.g.forRoot(W)],exports:[l.g]})],K);let X=class{constructor(e,t){this.accountService=e,this.presence=t,this.title="The Dating App"}ngOnInit(){this.setCurrentUser()}setCurrentUser(){const e=JSON.parse(localStorage.getItem("user"));e&&(this.accountService.setCurrentUser(e),this.presence.createHubConnection(e))}};X.ctorParameters=()=>[{type:P},{type:U}],X=Object(a.a)([Object(r.o)({selector:"app-root",template:'<ngx-ui-loader\nfgsType="rectangle-bounce-pulse-out"\ntext=\'Loading...\'\nfgsColor=\'black\'\n>\n</ngx-ui-loader>\n\n<app-nav></app-nav>\n\n<div ngxUiLoaderBlurred [blur]="10" class="container" style="margin-top: 100px">\n  <router-outlet></router-outlet>\n</div>\n\n',styles:[""]})],X);var Q=n("R1ws"),_=n("3Pt+");let Z=class{constructor(e,t,n){this.accountService=e,this.router=t,this.toastr=n,this.model={}}ngOnInit(){console.log(this.accountService.currentUser$)}login(){this.accountService.login(this.model).subscribe(e=>{this.router.navigateByUrl("/members"),console.log(e)})}logout(){this.accountService.logout(),this.router.navigateByUrl("/")}};Z.ctorParameters=()=>[{type:P},{type:l.f},{type:S.b}],Z=Object(a.a)([Object(r.o)({selector:"app-nav",template:'<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-primary">\n\t<div class="container">\n\t\t<a class="navbar-brand" routerLink=\'/\'>Dog App</a>\n\n\t\t\t<ul class="navbar-nav mr-auto"  >\n\t\t\t\t<ng-container *ngIf="(accountService.currentUser$ | async)">\n\t\t\t\t\t<li class="nav-item">\n\t\t\t\t\t\t<a class="nav-link" routerLink=\'/members\' routerLinkActive=\'active\'>Members</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class="nav-item">\n\t\t\t\t\t\t<a class="nav-link" routerLink=\'/lists\' routerLinkActive=\'active\'>Lists</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class="nav-item">\n\t\t\t\t\t\t<a class="nav-link" routerLink=\'/messages\' routerLinkActive=\'active\'>Messages</a>\n\t\t\t\t\t</li>\n          <li *appHasRole=\'["Admin", "Moderator"]\' class="nav-item">\n\t\t\t\t\t\t<a class="nav-link" routerLink=\'/admin\' routerLinkActive=\'active\'>Admin</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ng-container>\n\t\t\t\t<li class="nav-item">\n\t\t\t\t\t<a class="nav-link" routerLink=\'/errors\' routerLinkActive=\'active\'>Errors</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<div class="dropdown" *ngIf="(accountService.currentUser$ | async) as user" dropdown>\n\t\t\t\t<img src="{{user.photoUrl || \'./assets/user.png\'}}" alt="{{user.username}}">\n\t\t\t\t<a class="dropdown-toggle text-light" dropdownToggle>Welcome {{user.knownAs|| user.username | titlecase}}</a>\n\t\t\t\t<div class="dropdown-menu mt-3" *dropdownMenu>\n\t\t\t\t\t<a routerLink=\'/member/edit\' class="dropdown-item">Edit Profile</a>\n\t\t\t\t\t<div class="dropdown-divider"></div>\n\t\t\t\t\t<a class="dropdown-item" (click)="logout()">Logout</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<form  *ngIf="(accountService.currentUser$ | async) == null" #loginForm="ngForm" class="form-inline mt-2 mt-md-0" (ngSubmit)="login()"\n\t\t\t\tautocomplete="off">\n\t\t\t\t<input\n\t\t\t\t\tname="username"\n\t\t\t\t\t[(ngModel)]="model.username"\n\t\t\t\t\tclass="form-control mr-sm-2"\n\t\t\t\t\ttype="text"\n\t\t\t\t\tplaceholder="Username"\n\t\t\t\t>\n\t\t\t\t<input\n\t\t\t\t name="password"\n\t\t\t\t [(ngModel)]="model.password"\n\t\t\t\t class="form-control mr-sm-2"\n\t\t\t\t type="password"\n\t\t\t\t placeholder="Password">\n\t\t\t\t<button class="btn btn-success my-2 my-sm-0" type="submit">Login</button>\n\t\t\t</form>\n\t\t</div>\n</nav>\n',styles:[".dropdown-toggle, .dropdown-item\r\n{\r\n  cursor: pointer;\r\n}\r\n\r\nimg {\r\n  max-height: 50px;\r\n  border: 2px solid #fff;\r\n  display: inline;\r\n}\r\n"]})],Z);let ee=class{constructor(e,t,n,s){this.accountService=e,this.toastr=t,this.fb=n,this.router=s,this.cancelRegister=new r.x,this.validateErrors=[]}ngOnInit(){this.initializeForm(),this.maxDate=new Date,this.maxDate.setFullYear(this.maxDate.getFullYear()-18)}initializeForm(){this.registerForm=this.fb.group({gender:["male"],username:["",_.g.required],knownAs:["",_.g.required],dateOfBirth:["",_.g.required],city:["",_.g.required],country:["",_.g.required],password:["",[_.g.required,_.g.minLength(4),_.g.maxLength(8)]],confirmPassword:["",[_.g.required,this.matchValues("password")]]})}matchValues(e){return t=>{var n;return(null==t?void 0:t.value)===(null===(n=null==t?void 0:t.parent)||void 0===n?void 0:n.controls[e].value)?null:{isMathching:!0}}}register(){this.accountService.register(this.registerForm.value).subscribe(e=>{this.router.navigateByUrl("/members")},e=>{this.validateErrors=e})}cancel(){this.cancelRegister.emit(!1)}};ee.ctorParameters=()=>[{type:P},{type:S.b},{type:_.a},{type:l.f}],ee.propDecorators={cancelRegister:[{type:r.T}]},ee=Object(a.a)([Object(r.o)({selector:"app-register",template:'<form class="text-center" [formGroup]=\'registerForm\' (ngSubmit)="registerForm.valid && register()" autocomplete="off">\n  <h2 class="text-center text-primary">Sign Up</h2>\n  <hr>\n\n  <div class="form-group">\n    <label class="control-label" style=\'margin-right: 10px;\'> I am a: </label>\n    <label class="radio-inline">\n      <input type="radio" value="male" formControlName=\'gender\'> Male\n    </label>\n    <label class="radio-inline">\n      <input type="radio" value="female" formControlName=\'gender\' class=\'ml-3\'> Female\n    </label>\n  </div>\n\n  <app-text-input [formControl]=\'registerForm.controls["username"]\' [label]=\'"Username"\'></app-text-input>\n  <app-text-input [formControl]=\'registerForm.controls["knownAs"]\' [label]=\'"Known As"\'></app-text-input>\n  <app-date-input [formControl]=\'registerForm.controls["dateOfBirth"]\' [label]=\'"Date Of Birth"\' [maxDate]=\'maxDate\' ></app-date-input>\n  <app-text-input [formControl]=\'registerForm.controls["city"]\' [label]=\'"City"\'></app-text-input>\n  <app-text-input [formControl]=\'registerForm.controls["country"]\' [label]=\'"Country"\'></app-text-input>\n  <app-text-input [formControl]=\'registerForm.controls["password"]\' [label]=\'"Password"\' [type]=\'"password"\'></app-text-input>\n  <app-text-input [formControl]=\'registerForm.controls["confirmPassword"]\' [label]=\'"Confirm Password"\' [type]=\'"password"\' ></app-text-input>\n\n  <div class="row" *ngIf="validateErrors.length">\n    <ul class="tex-danger">\n      <li *ngFor=\'let error of validationErrors\'>\n        {{error}}\n      </li>\n    </ul>\n  </div>\n\n  <div class="form-group">\n    <button [disabled]=\'!registerForm.valid\' class="btn btn-success mr-4" type="submit">Register</button>\n    <button class="btn btn-danger  mr-4" (click)="cancel()" type="submit">Cancel</button>\n  </div>\n</form>\n',styles:[""]})],ee);let te=class{constructor(e,t,n){this.memberService=e,this.toastr=t,this.presence=n}ngOnInit(){}addLike(e){this.memberService.addLike(e.username).subscribe(()=>{this.toastr.success("You have liked "+e.knownAs)})}};te.ctorParameters=()=>[{type:R},{type:S.b},{type:U}],te.propDecorators={member:[{type:r.H}]},te=Object(a.a)([Object(r.o)({selector:"app-member-card",template:'<div class="card mb-4">\n  <div class="card-img-wrapper">\n    <img src="{{member.photoUrl || \'./assets/user.png\'}}" alt="{{member.knownAs}}" class="card-img-top">\n    <ul class="list-inline member-icons animate text-center">\n      <li class="list-inline-item">\n        <button routerLink=\'/members/{{member.username}}\' class="btn btn-primary">\n          <i class="fa fa-user"></i>\n        </button>\n      </li>\n      <li class="list-inline-item">\n        <button (click)="addLike(member)" class="btn btn-primary">\n          <i class="fa fa-heart"></i>\n        </button>\n      </li>\n      <li class="list-inline-item">\n        <button\n        routerLink=\'/members/{{member.username}}\'\n        [queryParams]=\'{tab:3}\'\n        class="btn btn-primary">\n          <i class="fa fa-envelope"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n  <div class="card-body p-1">\n    <h6 class="card-title text-center mb-1">\n      <span [class.is-online]="(presence.onlineUsers$ | async).includes(member.username)">\n        <i class="fa fa-user mr-2"></i>\n      </span>\n      {{member.knownAs}}, {{member.age}}\n    </h6>\n    <p class="card-text text-muted text-center">{{member.city}}</p>\n  </div>\n</div>\n',styles:[".card:hover img {\r\n  transform: scale(1.2,1.2);\r\n  transition-duration: 500ms;\r\n  transition-timing-function: ease-out;\r\n  opacity: 0.7;\r\n}\r\n\r\n\r\n.card img {\r\n  transform: scale(1.0,1.0);\r\n  transition-duration: 500ms;\r\n  transition-timing-function: ease-out;\r\n}\r\n\r\n\r\n.card-img-wrapper{\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n\r\n\r\n.member-icons {\r\n  position: absolute;\r\n  bottom: -30%;\r\n  left: 0;\r\n  right: 0;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  opacity: 0;\r\n}\r\n\r\n\r\n.card-img-wrapper:hover .member-icons {\r\n  bottom: 0;\r\n  opacity: 1;\r\n}\r\n\r\n\r\n.animate {\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n\r\n\r\n@keyframes fa-blink {\r\n  0% {opacity: 1;}\r\n  100% {opacity: 0.4;}\r\n}\r\n\r\n\r\n.is-online{\r\n  animation: fa-blink 1.5s linear infinite;\r\n  color: rgb(1, 189, 42);\r\n}\r\n"]})],te);var ne=n("ofXK"),re=n("dZIy"),se=n("44PX"),ae=n("7pIB"),oe=n("hzby"),ie=n("Lm2G"),le=n("s3T5"),ce=n("twue");let me=class{};me=Object(a.a)([Object(r.M)({declarations:[],imports:[ne.c,S.a.forRoot({positionClass:"toast-bottom-right"}),re.a.forRoot(),se.a.forRoot(),T.b,ae.a,oe.a.forRoot(),ie.a.forRoot(),le.a.forRoot(),ce.a.forRoot(),H.c.forRoot()],exports:[re.a,S.a,se.a,T.b,ae.a,oe.a,ie.a,le.a,ce.a,H.c]})],me);var de=n("z6cu"),pe=n("JIr8");let ue=class{constructor(e,t){this.router=e,this.toastr=t}intercept(e,t){return t.handle(e).pipe(Object(pe.a)(e=>{if(e)switch(e.status){case 400:if(e.error.errors){const t=[];for(const n in e.error.errors)e.error.errors[n]&&t.push(e.error.errors[n]);throw t.flat()}"object"==typeof e.error?this.toastr.error(e.statusText,e.status):this.toastr.error(e.error,e.status);break;case 401:this.toastr.error("OK"===e.statusText?"Unauthorized":e.statusText,e.status);break;case 404:this.router.navigateByUrl("/not-found");break;case 500:const t={state:{error:e.error}};this.router.navigateByUrl("/server-error",t);break;default:this.toastr.error("something unexpected went wrong"),console.log(e)}return Object(de.a)(e)}))}};ue.ctorParameters=()=>[{type:l.f},{type:S.b}],ue=Object(a.a)([Object(r.E)()],ue);let be=class{constructor(e){this.accountService=e}intercept(e,t){let n;return this.accountService.currentUser$.pipe(Object(g.a)(1)).subscribe(e=>n=e),n&&(e=e.clone({setHeaders:{Authorization:`Bearer ${n.token}`}})),t.handle(e)}};be.ctorParameters=()=>[{type:P}],be=Object(a.a)([Object(r.E)()],be);var he=n("gren");let ge=class{constructor(e){this.spinnerService=e,this.busyRequstCount=0}busy(){this.busyRequstCount++,this.spinnerService.start()}idle(){this.busyRequstCount--,this.busyRequstCount<=0&&(this.busyRequstCount=0,this.spinnerService.stop())}};ge.ctorParameters=()=>[{type:he.b}],ge=Object(a.a)([Object(r.E)({providedIn:"root"})],ge);var ve=n("nYR2");let fe=class{constructor(e){this.busyService=e}intercept(e,t){return this.busyService.busy(),t.handle(e).pipe(Object(ve.a)(()=>{this.busyService.idle()}))}};fe.ctorParameters=()=>[{type:ge}],fe=Object(a.a)([Object(r.E)()],fe);let ye=class{constructor(e,t){this.accountService=e,this.memberService=t,this.hasBaseDropzoneOver=!1,this.baseUrl=y,this.accountService.currentUser$.pipe(Object(g.a)(1)).subscribe(e=>this.user=e)}ngOnInit(){this.initializeUploader()}fileOverBase(e){this.hasBaseDropzoneOver=e}setMainPhoto(e){this.memberService.setMainPhoto(e.id).subscribe(()=>{this.user.photoUrl=e.url,this.accountService.setCurrentUser(this.user),this.member.photoUrl=e.url,this.member.photos.forEach(t=>{t.isMain&&(t.isMain=!1),t.id===e.id&&(t.isMain=!0)})})}deletePhoto(e){this.memberService.deletePhoto(e).subscribe(()=>{this.member.photos=this.member.photos.filter(t=>t.id!==e)})}initializeUploader(){this.uploader=new ae.b({url:this.baseUrl+"users/add-photo",authToken:"Bearer "+this.user.token,isHTML5:!0,allowedFileType:["image"],removeAfterUpload:!0,autoUpload:!1,maxFileSize:10485760}),this.uploader.onAfterAddingFile=e=>{e.withCredentials=!1},this.uploader.onSuccessItem=(e,t,n,r)=>{if(t){const e=JSON.parse(t);this.member.photos.push(e),e.isMain&&(this.user.photoUrl=e.url,this.member.photoUrl=e.url,this.accountService.setCurrentUser(this.user))}}}};ye.ctorParameters=()=>[{type:P},{type:R}],ye.propDecorators={member:[{type:r.H}]},ye=Object(a.a)([Object(r.o)({selector:"app-photo-editor",template:'<div class="row">\r\n  <div class="col-2 img-wrapper" *ngFor="let photo of member.photos">\r\n    <img\r\n      src="{{ photo.url }}"\r\n      alt="{{ photo.url }}"\r\n      class="img-thumbnail p-1"\r\n      [class.not-approved]="!photo.isApproved"\r\n    />\r\n\r\n    <div class="text-center img-text" *ngIf="!photo.isApproved">\r\n      <span class="text-danger">Awaiting approval</span>\r\n    </div>\r\n\r\n    <div class="text-center">\r\n      <button\r\n        [disabled]="photo.isMain || !photo.isApproved"\r\n        (click)="setMainPhoto(photo)"\r\n        [ngClass]="photo.isMain ? \'btn-success active\' : \'btn-outline-success\'"\r\n        class="btn btn-sm"\r\n      >\r\n        Main\r\n      </button>\r\n      <button\r\n        [disabled]="photo.isMain"\r\n        (click)="deletePhoto(photo.id)"\r\n        class="btn btn-sm btn-danger"\r\n      >\r\n        <i class="fa fa-trash"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class="row mt-3">\r\n  <div class="col-md-3">\r\n    <h3>Add Photos</h3>\r\n\r\n    <div\r\n      ng2FileDrop\r\n      [ngClass]="{ \'nv-file-over\': hasBaseDropzoneOver }"\r\n      (fileOver)="fileOverBase($event)"\r\n      [uploader]="uploader"\r\n      class="card bg-faded p-3 text-center mb-3 my-drop-zone"\r\n    >\r\n      <i class="fa fa-upload fa-3x"></i>\r\n      Drop photos here\r\n    </div>\r\n\r\n    Multiple\r\n    <input type="file" ng2FileSelect [uploader]="uploader" multiple /><br />\r\n\r\n    Single\r\n    <input type="file" ng2FileSelect [uploader]="uploader" />\r\n  </div>\r\n\r\n  <div\r\n    class="col-md-9"\r\n    style="margin-bottom: 40px"\r\n    *ngIf="uploader?.queue?.length"\r\n  >\r\n    <h3>Upload queue</h3>\r\n    <p>Queue length: {{ uploader?.queue?.length }}</p>\r\n\r\n    <table class="table">\r\n      <thead>\r\n        <tr>\r\n          <th width="50%">Name</th>\r\n          <th>Size</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor="let item of uploader.queue">\r\n          <td>\r\n            <strong>{{ item?.file?.name }}</strong>\r\n          </td>\r\n          <td *ngIf="uploader.options.isHTML5" nowrap>\r\n            {{ item?.file?.size / 1024 / 1024 | number: ".2" }} MB\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <div>\r\n      <div>\r\n        Queue progress:\r\n        <div class="progress">\r\n          <div\r\n            class="progress-bar"\r\n            role="progressbar"\r\n            [ngStyle]="{ width: uploader.progress + \'%\' }"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n      <button\r\n        type="button"\r\n        class="btn btn-success btn-s"\r\n        (click)="uploader.uploadAll()"\r\n        [disabled]="!uploader.getNotUploadedItems().length"\r\n      >\r\n        <span class="fa fa-upload"></span> Upload all\r\n      </button>\r\n      <button\r\n        type="button"\r\n        class="btn btn-warning btn-s"\r\n        (click)="uploader.cancelAll()"\r\n        [disabled]="!uploader.isUploading"\r\n      >\r\n        <span class="fa fa-ban"></span> Cancel all\r\n      </button>\r\n      <button\r\n        type="button"\r\n        class="btn btn-danger btn-s"\r\n        (click)="uploader.clearQueue()"\r\n        [disabled]="!uploader.queue.length"\r\n      >\r\n        <span class="fa fa-trash"></span> Remove all\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n',styles:["img.img-thuumbnail {\r\n  height: 100ps;\r\n  min-width: 100px !important;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n\r\n.nv-file-over {\r\n  border: dotted 3px red;\r\n}\r\n\r\n\r\ninput[type=file] {\r\n  color: transparent;\r\n}\r\n\r\n\r\n.not-approved {\r\n  opacity: 0.2;\r\n}\r\n\r\n\r\n.img-wrapper {\r\n  position: relative\r\n}\r\n\r\n\r\n.img-text {\r\n  position: absolute;\r\n  bottom: 30%;\r\n}\r\n"]})],ye);let xe=class{constructor(e){this.ngControl=e,this.type="text",this.ngControl.valueAccessor=this}writeValue(e){}registerOnChange(e){}registerOnTouched(e){}};xe.ctorParameters=()=>[{type:_.e,decorators:[{type:r.eb}]}],xe.propDecorators={label:[{type:r.H}],type:[{type:r.H}]},xe=Object(a.a)([Object(r.o)({selector:"app-text-input",template:'<div class="form-group">\n  <input\n  [class.is-invalid]="ngControl.touched && ngControl.invalid"\n  type={{type}}\n  class="form-control"\n  [formControl]="ngControl.control"\n  placeholder={{label}}>\n      <div *ngIf="ngControl.control.errors?.required" class="invalid-feedback text-center"> Please enter a {{label}}</div>\n      <div  *ngIf="ngControl.control.errors?.minlength" class="invalid-feedback text-center">\n        {{label}} must be at least {{ngControl.control.errors.minlength[\'requiredLength\']}}\n      </div>\n      <div  *ngIf="ngControl.control.errors?.maxlength" class="invalid-feedback text-center">\n        {{label}} must be at least {{ngControl.control.errors.maxlength[\'requiredLength\']}}\n      </div>\n      <div  *ngIf="ngControl.control.errors?.isMatching" class="invalid-feedback text-center">\n        Passwords do not match\n      </div>\n</div>\n',styles:[""]})],xe);let Oe=class{constructor(e){this.ngControl=e,this.ngControl.valueAccessor=this,this.bsConfig={containerClass:"theme-dark-blue",dateInputFormat:"DD MMM YYYY"}}writeValue(e){}registerOnChange(e){}registerOnTouched(e){}setDisabledState(e){}ngOnInit(){}};Oe.ctorParameters=()=>[{type:_.e,decorators:[{type:r.eb}]}],Oe.propDecorators={label:[{type:r.H}],maxDate:[{type:r.H}]},Oe=Object(a.a)([Object(r.o)({selector:"app-date-input",template:"<div class=\"form-group\">\n  <input\n    type=\"text\"\n    [class.is-invalid]='ngControl.touched && ngControl.invalid'\n    class='form-control'\n    [formControl]='ngControl.control'\n    placeholder=\"{{label}}\"\n    bsDatepicker\n    [bsConfig]='bsConfig'\n    [maxDate]='maxDate'\n  >\n\n  <div *ngIf=\"ngControl.control.errors?.required \" class=\"invalid-feedback\">{{label}} is required </div>\n</div>\n",styles:[""]})],Oe);let we=class{constructor(e){this.messageService=e}ngOnInit(){}sendMessage(){this.messageService.sendMessage(this.username,this.messageContent).then(()=>{this.messageForm.reset()})}};we.ctorParameters=()=>[{type:E}],we.propDecorators={messageForm:[{type:r.nb,args:["messageForm"]}],messages:[{type:r.H}],username:[{type:r.H}]},we=Object(a.a)([Object(r.o)({changeDetection:r.k.OnPush,selector:"app-member-messages",template:'<div class="card">\n    <div class="card-body">\n        <div *ngIf="(messageService.messageThread$ | async)?.length === 0">\n            No messages yet... get to saying something\n        </div>\n\n        <ul #scrollMe\n        style="overflow:scroll; height: 500px;"\n        [scrollTop]="scrollMe.scrollHeight"\n        class="chat"\n         *ngIf="(messageService.messageThread$ | async).length > 0">\n          <li *ngFor="let message of (messageService.messageThread$ | async)">\n            <div>\n                <span class="chat-img float-right">\n                    <img class="rounded-circle" src="{{message.senderPhotoUrl || \'./assets/user.png\'}}"\n                     alt="{{message.senderUsername}}" >\n                </span>\n                <div class="chat-body">\n                    <div class="header">\n                        <small class="text-muted">\n                            <span class="fa fa-clock-o">{{message.messageSent | timeago}}</span>\n                            <span class="text-danger" *ngIf="!message.dateRead\n                                  && message.senderUsername !== username">\n                                  (unread)\n                            </span>\n                            <span class="text-success" *ngIf="message.dateRead\n                                  && message.senderUsername !== username">\n                                  (read {{message.dateRead | timeago}})\n                            </span>\n                        </small>\n                    </div>\n                    <p>{{message.content}}</p>\n                </div>\n            </div>\n          </li>\n        </ul>\n    </div>\n\n\n    <div class="card-footer">\n      <form #messageForm="ngForm" (ngSubmit)="sendMessage()" autocomplete="off">\n          <div class="input-group">\n            <input\n              name="messageContent"\n              required\n              [(ngModel)]="messageContent"\n              type="text"\n              class="form-controlo input-sm"\n              placeholder="Send a private message">\n            <div class="input-group-append">\n              <button [disabled]="!messageForm.valid" class="btn btn-primary" type="submit">Send</button>\n            </div>\n          </div>\n      </form>\n    </div>\n\n</div>\n',styles:[".card {\r\n  border: none;\r\n}\r\n\r\n.chat {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.chat li {\r\n  margin-bottom: 10px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px dotted #b3a9a9;\r\n}\r\n\r\n.rounded-circle {\r\n    max-height: 50px;\r\n}\r\n\r\n.chat::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n/* Hide scrollbar for IE, Edge and Firefox */\r\n\r\n.chat {\r\n  -ms-overflow-style: none;  /* IE and Edge */\r\n  scrollbar-width: none;  /* Firefox */\r\n}\r\n"]})],we);let ke=class{constructor(e,t,n){this.viewContainerRef=e,this.templateRef=t,this.accountService=n,this.accountService.currentUser$.pipe(Object(g.a)(1)).subscribe(e=>{this.user=e})}ngOnInit(){var e,t;(null===(e=this.user)||void 0===e?void 0:e.roles)&&null!=this.user&&(null===(t=this.user)||void 0===t?void 0:t.roles.some(e=>this.appHasRole.includes(e)))?this.viewContainerRef.createEmbeddedView(this.templateRef):this.viewContainerRef.clear()}};ke.ctorParameters=()=>[{type:r.ob},{type:r.jb},{type:P}],ke.propDecorators={appHasRole:[{type:r.H}]},ke=Object(a.a)([Object(r.u)({selector:"[appHasRole]"})],ke);let Se=class{constructor(e){this.bsModalRef=e,this.updateSelectedRoles=new r.x}ngOnInit(){}updateRoles(){this.updateSelectedRoles.emit(this.roles),this.bsModalRef.hide()}};Se.ctorParameters=()=>[{type:H.a}],Se.propDecorators={updateSelectedRoles:[{type:r.H}]},Se=Object(a.a)([Object(r.o)({selector:"app-roles-modal",template:'<div class="modal-header">\n  <h4 class="modal-title pull-left">Edit roles for {{user.username}}</h4>\n  <button type="button" class="close pull-right" aria-label="Close" (click)="bsModalRef.hide()">\n    <span aria-hidden="true">&times;</span>\n  </button>\n</div>\n<div class="modal-body">\n  <form #roleForm="ngForm" id="roleForm">\n    <div class="form-check" *ngFor="let role of roles">\n      <input type="checkbox"\n          class="form-check-input"\n          [checked]="role.checked"\n          value="role.name"\n          (change)="role.checked = !role.checked"\n          [disabled]="role.name === \'Admin\' && user.username === \'admin\'"\n      >\n      <label>{{role.name}}</label>\n    </div>\n  </form>\n</div>\n<div class="modal-footer">\n  <button type="button" class="btn btn-default" (click)="bsModalRef.hide()">Cancel</button>\n  <button type="button" class="btn btn-success" (click)="updateRoles()">Submit</button>\n\n</div>\n',styles:[""]})],Se);let Me=class{constructor(e){this.http=e,this.baseUrl=y}getUserWithRoles(){return this.http.get(this.baseUrl+"admin/users-with-roles")}updateUserRoles(e,t){return this.http.post(this.baseUrl+"admin/edit-roles/"+e+"?roles="+t,{})}getPhotosForApproval(){return this.http.get(this.baseUrl+"admin/photos-to-moderate")}approvePhoto(e){return this.http.post(this.baseUrl+"admin/approve-photo/"+e,{})}rejectPhoto(e){return this.http.post(this.baseUrl+"admin/reject-photo/"+e,{})}};Me.ctorParameters=()=>[{type:o.b}],Me=Object(a.a)([Object(r.E)({providedIn:"root"})],Me);let Ue=class{constructor(e,t){this.adminService=e,this.modalService=t}ngOnInit(){this.getUserWithRole()}getUserWithRole(){this.adminService.getUserWithRoles().subscribe(e=>{this.users=e})}openRoleModal(e){const t={class:"modal-dialog-centered",initialState:{user:e,roles:this.getRolesArray(e)}};this.bsModalRef=this.modalService.show(Se,t),this.bsModalRef.content.updateSelectedRoles.subscribe(t=>{const n={roles:[...t.filter(e=>e.checked=!0).map(e=>e.name)]};n&&this.adminService.updateUserRoles(e.username,n.roles).subscribe(()=>{e.roles=[...n.roles]})})}getRolesArray(e){const t=[],n=e.roles;return[{name:"Admin",value:"Admin"},{name:"Moderator",value:"Moderator"},{name:"Member",value:"Member"}].forEach(e=>{let r=!1;for(const s of n)if(e.name===s){r=!0,e.checked=!0,t.push(e);break}r||(e.checked=!1,t.push(e))}),t}};Ue.ctorParameters=()=>[{type:Me},{type:H.b}],Ue=Object(a.a)([Object(r.o)({selector:"app-user-management",template:'<div class="row">\n  <table class="table">\n    <tr>\n        <th style="width: 30%;">Username</th>\n        <th style="width: 40%;">Active roles</th>\n        <th style="width: 30%;"></th>\n    </tr>\n    <tr *ngFor="let user of users">\n      <td>{{user.username}}</td>\n      <td>{{user.roles}}</td>\n      <td><button (click)="openRoleModal(user)" class="btn btn-info">Edit Roles</button></td>\n    </tr>\n  </table>\n</div>\n',styles:[".btn {\r\n  color: #2391be;\r\n}\r\n.btn:hover{\r\n  color: white;\r\n}\r\n"]})],Ue);let Pe=class{constructor(e){this.adminService=e}ngOnInit(){this.getPhotosForApproval()}getPhotosForApproval(){this.adminService.getPhotosForApproval().subscribe(e=>{this.photos=e})}approvePhoto(e){this.adminService.approvePhoto(e).subscribe(()=>{this.photos.splice(this.photos.findIndex(t=>t.id===e),1)})}rejectPhoto(e){this.adminService.rejectPhoto(e).subscribe(()=>{this.photos.splice(this.photos.findIndex(t=>t.id===e),1)})}};Pe.ctorParameters=()=>[{type:Me}],Pe=Object(a.a)([Object(r.o)({selector:"app-photo-management",template:'<div class="row">\r\n  <div class="col-sm-2" *ngFor="let photo of photos">\r\n    <h4>{{ photo.username }}</h4>\r\n    <img\r\n      src="{{ photo.url }}"\r\n      class="img-thumbnail p-1"\r\n      alt="{{ photo.username }}"\r\n    />\r\n    <div class="text-center">\r\n      <button\r\n        class="btn btn-sm btn-success mr-1"\r\n        (click)="approvePhoto(photo.id)"\r\n      >\r\n        Approve\r\n      </button>\r\n      <button class="btn btn-sm btn- danger" (click)="rejectPhoto(photo.id)">\r\n        Reject\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n',styles:["img.img-thumbnail {\r\n  height: 150px;\r\n  min-width: 150px !important;\r\n  margin-bottom: 2px;\r\n}\r\n"]})],Pe);let je=class{};je=Object(a.a)([Object(r.M)({declarations:[X,Z,b,ee,q,L,A,B,u,m,d,te,D,ye,xe,Oe,we,c,ke,Ue,Pe,Se,N],schemas:[r.j],imports:[i.a,K,o.c,Q.a,_.b,_.f,me,he.a],providers:[{provide:o.a,useClass:ue,multi:!0},{provide:o.a,useClass:be,multi:!0},{provide:o.a,useClass:fe,multi:!0}],bootstrap:[X]})],je),f&&Object(r.rb)(),Object(s.a)().bootstrapModule(je).catch(e=>console.error(e))},zn8P:function(e,t){function n(e){return Promise.resolve().then(function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t})}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id="zn8P"}},[[0,0,4]]]);
//# sourceMappingURL=main.d97efd145558fc01dfbe.js.map